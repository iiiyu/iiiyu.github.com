<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萧宸宇</title>
  
  <subtitle>如果不能成为拯救世界的神，那就堕落到征服世界的魔吧。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iiiyu.com/"/>
  <updated>2018-08-15T13:08:58.637Z</updated>
  <id>http://iiiyu.com/</id>
  
  <author>
    <name>萧宸宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新西兰徒步指北 - 奥克兰 Maraetai Coastal</title>
    <link href="http://iiiyu.com/2018/08/15/New-Zealand-Hiking-Guide-No-1-Maraetai-Coastal/"/>
    <id>http://iiiyu.com/2018/08/15/New-Zealand-Hiking-Guide-No-1-Maraetai-Coastal/</id>
    <published>2018-08-15T11:41:28.000Z</published>
    <updated>2018-08-15T13:08:58.637Z</updated>
    
    <content type="html"><![CDATA[<p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="步道地址"><a href="#步道地址" class="headerlink" title="步道地址"></a>步道地址</h2><p>265 Maraetai Dr, Maraetai, Auckland 2018</p><p>GPS定位：(-36.8816430, 175.0477450)</p><p>从City出发，开车大概需要40-50分钟不等。开车的路都很好走，没有山路。</p><a id="more"></a><p><img src="https://lh3.googleusercontent.com/-OOdZIrv6lmE/W3QXSuWQZlI/AAAAAAAAAUA/EOHG161MLfco3_fIp-Idmn8wIJk-AtKwgCHMYCw/I/15343347107886.jpg" alt=""></p><h2 id="步道难度"><a href="#步道难度" class="headerlink" title="步道难度"></a>步道难度</h2><p>1星</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>星 —— 合家欢乐</span><br><span class="line"><span class="number">2</span>星 —— 稍微需要一点体力</span><br><span class="line"><span class="number">3</span>星 —— 路面较原生态，具有一定挑战性</span><br><span class="line"><span class="number">4</span>星 —— 需要具备专业知识和做好充足的准备</span><br><span class="line"><span class="number">5</span>星 —— 路程远，路途中有较多危险路面。需要专业素养。不要轻易挑战</span><br></pre></td></tr></table></figure><h2 id="步道适合年龄"><a href="#步道适合年龄" class="headerlink" title="步道适合年龄"></a>步道适合年龄</h2><p>0-99岁，全年龄段。</p><h2 id="步道路线-amp-amp-步道长度"><a href="#步道路线-amp-amp-步道长度" class="headerlink" title="步道路线 &amp;&amp; 步道长度"></a>步道路线 &amp;&amp; 步道长度</h2><p><img src="https://lh3.googleusercontent.com/-p5vSGhhikuY/W3QbpiKtWLI/AAAAAAAAAUc/7nBooCSYaFYw_eUxHG6wqWB3mPwH_6oPgCHMYCw/I/15343358977070.jpg" alt=""></p><p>到休整点返回的时候，可以原路返回。这样就来回都是海岸线。</p><p>来回大概12km</p><p>按照吃完晚饭遛弯的速度，3个半小时足以来回。</p><h2 id="徒步装备"><a href="#徒步装备" class="headerlink" title="徒步装备"></a>徒步装备</h2><ol><li>普通运动鞋</li><li>750ml左右的水（推荐：功能性饮料）</li><li>如果徒步时间跨越了饭点，请准备好一些食物。（推荐：巧克力、士力架以及想要带着吃的东西）</li><li>准备好防晒霜（推荐：可以直接喷雾剂样的防晒霜，路途中随时补防晒）</li><li>帽子</li><li>透气性好的衣物</li></ol><p>由于全程几乎95%以上的路面都是人工路面，路况非常的好。</p><ul><li>可以骑行</li><li>可以带小滑板车</li><li>甚至可以带电动平衡车</li></ul><p>路线上有巨大的草坪和在一开始停车的地方有沙滩草坪，可以携带足球、排球等。跟朋友一起嗨。</p><h2 id="一些体会"><a href="#一些体会" class="headerlink" title="一些体会"></a>一些体会</h2><p>人比较多，其实大部分就是修的很棒的泊油路。所以完全是0难度的徒步。</p><p>由于是东海岸和整个海岸线是向北的。如果想要拍照好看的照片和录视频。建议再日落前4小时出发。这样回来的时候可以拍到很漂亮的照片。</p><p>我们是早上10点左右到达的，太阳直射，拍出来的照片，曝光惨不忍睹。</p><p>在出发大概20分钟左右，在一个Playgroups的旁边。海边有一棵很大的歪脖子树，反正随行的同事爬上去照相了。感觉是个不错的照相地点。</p><p>而且看到有人钓鱼，所以有钓鱼打算的话，需要注意一下潮水时间，你可以在涨潮前钓鱼一波，然后开始退潮的时候</p><h2 id="一些图片"><a href="#一些图片" class="headerlink" title="一些图片"></a>一些图片</h2><p><img src="https://lh3.googleusercontent.com/-TfUYC1ClcBo/W3QiyBzcZwI/AAAAAAAAAU0/JevFbrq2m18p1CgFg5fnpnaLuXZwZ93xwCHMYCw/I/1571534337463_.pic_hd.jpg" alt="1571534337463_.pic_hd"><br><img src="https://lh3.googleusercontent.com/-Ix_h-darM3E/W3Qi1pyzaKI/AAAAAAAAAU4/z1scenKplFc9pt9TQ3SKuRkyPa6_YaLGACHMYCw/I/IMG_3182.jpg" alt="IMG_3182"><br><img src="https://lh3.googleusercontent.com/-IhE0Er9liTE/W3Qi6Y0MeyI/AAAAAAAAAU8/jtlf-3MOn-kpy_st5xS9amfhtFKpjQJpACHMYCw/I/IMG_3187.jpg" alt="IMG_3187"><br><img src="https://lh3.googleusercontent.com/-nhFrsprty50/W3Qi-VV1l1I/AAAAAAAAAVA/7zZrWssFjBcXLzKsWxee75dAIOHkhev_wCHMYCw/I/IMG_3254.jpg" alt="IMG_3254"><br><img src="https://lh3.googleusercontent.com/-DGoaBFSsIQ4/W3QjDk_P7LI/AAAAAAAAAVI/4g98cnKH1zY7hPImW_4eg-Efxqlw50MRwCHMYCw/I/IMG_3190.jpg" alt="IMG_3190"><br><img src="https://lh3.googleusercontent.com/-iu57LHMH6cM/W3QjJ717ffI/AAAAAAAAAVQ/A2djS13m_GIZPGLKne51w2qspujV8ImlACHMYCw/I/IMG_3193.jpg" alt="IMG_3193"><br><img src="https://lh3.googleusercontent.com/-D7iJGIsd8cE/W3QjP1Z5dZI/AAAAAAAAAVY/uJ7geTiOb-0h_2qEmjSiOHJhbid5s-X-ACHMYCw/I/IMG_3196.jpg" alt="IMG_3196"><br><img src="https://lh3.googleusercontent.com/-mG5aUngxlxU/W3QjXAHyWzI/AAAAAAAAAVg/-gczllb1B0whfpMYihZezsq5nPPUDhsJgCHMYCw/I/IMG_3219.jpg" alt="IMG_3219"><br><img src="https://lh3.googleusercontent.com/-_H4M23Fvi6k/W3QjdeTI5FI/AAAAAAAAAVo/ccefq9CK3gQJnlrCzrm0kaZV39KueC_UwCHMYCw/I/IMG_3226.jpg" alt="IMG_3226"></p><h2 id="一些视频"><a href="#一些视频" class="headerlink" title="一些视频"></a>一些视频</h2><div class="video-container"><iframe src="//www.youtube.com/embed/Nura42VPtAc" frameborder="0" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站,这样您将能在第一时间获取本站信息.&lt;/p&gt;
&lt;h2 id=&quot;步道地址&quot;&gt;&lt;a href=&quot;#步道地址&quot; class=&quot;headerlink&quot; title=&quot;步道地址&quot;&gt;&lt;/a&gt;步道地址&lt;/h2&gt;&lt;p&gt;265 Maraetai Dr, Maraetai, Auckland 2018&lt;/p&gt;
&lt;p&gt;GPS定位：(-36.8816430, 175.0477450)&lt;/p&gt;
&lt;p&gt;从City出发，开车大概需要40-50分钟不等。开车的路都很好走，没有山路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="新西兰" scheme="http://iiiyu.com/tags/%E6%96%B0%E8%A5%BF%E5%85%B0/"/>
    
      <category term="新西兰徒步" scheme="http://iiiyu.com/tags/%E6%96%B0%E8%A5%BF%E5%85%B0%E5%BE%92%E6%AD%A5/"/>
    
      <category term="徒步指南" scheme="http://iiiyu.com/tags/%E5%BE%92%E6%AD%A5%E6%8C%87%E5%8D%97/"/>
    
      <category term="新西兰徒步指北" scheme="http://iiiyu.com/tags/%E6%96%B0%E8%A5%BF%E5%85%B0%E5%BE%92%E6%AD%A5%E6%8C%87%E5%8C%97/"/>
    
  </entry>
  
  <entry>
    <title>OhMyStar2 产品方面的自问自答</title>
    <link href="http://iiiyu.com/2017/11/08/Product-Q-A-with-OhMyStar2/"/>
    <id>http://iiiyu.com/2017/11/08/Product-Q-A-with-OhMyStar2/</id>
    <published>2017-11-07T12:41:16.000Z</published>
    <updated>2017-11-07T20:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文属于自问自答，解释一些 OhMyStar2 的产品思路。</p><a id="more"></a><p><strong>注意</strong></p><p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h2><h3 id="问题1-OhMyStar2-的愿景是什么？"><a href="#问题1-OhMyStar2-的愿景是什么？" class="headerlink" title="问题1: OhMyStar2 的愿景是什么？"></a>问题1: OhMyStar2 的愿景是什么？</h3><p>OhMyStar 的愿景是做最好的 GitHub Star 管理工具。说句不要脸的话：从 OhMyStar1 开始，其实 OhMyStar 系列一直都是市面上能见到最好用的 Github Star 管理工具。</p><p>当然形成这个局面的并不是 OhMyStar 多么优秀。而是 OhMyStar 出现的比较早，让我有足够的时间去思考和设计整个产品。并且这是一个非常非常小众的需求，导致市面上没有太多类似的产品。以至于一些竞品的出现，都带有浓重“致敬” OhMyStar 的感觉。我并没有看见有更加优秀的方案来解决 Github Star 的管理问题。</p><h3 id="问题2：OhMyStar1-存在哪些问题？"><a href="#问题2：OhMyStar1-存在哪些问题？" class="headerlink" title="问题2：OhMyStar1 存在哪些问题？"></a>问题2：OhMyStar1 存在哪些问题？</h3><h4 id="1-分组和-Tag-功能重叠。不够简单直观。"><a href="#1-分组和-Tag-功能重叠。不够简单直观。" class="headerlink" title="1. 分组和 Tag 功能重叠。不够简单直观。"></a>1. 分组和 Tag 功能重叠。不够简单直观。</h4><p>分组和 Tag 功能合并为一个。经过思考以后认为 Tag 比分组更好。因为单同一个项目需要给多个分类定义的时候。多 Tag 给用户的感觉比多个分组要准确的多。</p><h4 id="2-软件功能较少，用户粘性不够好。"><a href="#2-软件功能较少，用户粘性不够好。" class="headerlink" title="2. 软件功能较少，用户粘性不够好。"></a>2. 软件功能较少，用户粘性不够好。</h4><p>软件功能不够，就增加一些使用频率高的功能。Trending、搜索和 Readme 阅读模式。</p><p>Trending —— 每天、每周、每月各个语言多项目热度是一个很高频的使用场景。而 GitHub 官方几次改版都越来把它隐藏的更加深。我能理解官方的意图是让你自己多写代码，少去无意义的参合热点。但是浏览 Trending 是很多人每天的习惯，所以一定加上。</p><p>搜索 —— 是我在 OhMyStar 1 上使用最频繁的功能。能让我坚持写完 OhMyStar1 的一个重要动力就是当时 GitHub 官方对自己 Star 过的项目搜索支持相当糟糕。同时 OhMyStar1 的搜索其实很弱鸡。所以这么重要的一个功能必须进化的更加强大。</p><p>Readme 阅读模式 —— 当在使用某个库需要参考 Readme 的时候。可能就会在浏览器和编辑器 or Shell 之间来回切换。Readme 阅读模式的设计是可以钉到所有窗口的最前面。让用户更加方便的去一边操作一边看 Readem。</p><h4 id="3-一些-GitHub-轻度用户-Star-项目较少甚至连一个项目没有。完全没有使用-OhMyStar-的必要性。"><a href="#3-一些-GitHub-轻度用户-Star-项目较少甚至连一个项目没有。完全没有使用-OhMyStar-的必要性。" class="headerlink" title="3. 一些 GitHub 轻度用户 Star 项目较少甚至连一个项目没有。完全没有使用 OhMyStar 的必要性。"></a>3. 一些 GitHub 轻度用户 Star 项目较少甚至连一个项目没有。完全没有使用 OhMyStar 的必要性。</h4><p>解决这个问题这是在设计 OhMyStar2 中最重要的一点。为什么呢？如果用户 Star 越多的代码项目，他管理代码项目的需求就会越高。如果能解决这个问题，就可以源源不断的创造管理 Github Star 的需求。那 OhMyStar 就能源源不断的得到新用户。在意淫完 OhMyStar 要有无数用户的以后。最后的问题就呼之欲出——如何让用户不停的 Star 项目？</p><p>这是我认为 OhMyStar2 中，我最骄傲的产品设计部分。那么 OhMyStar2 是如何解决这个问题的？</p><ol><li>使用 OAuth 认证，获得 Star 和 Unstar 的能力。（PS：OhMyStar1 是不用登录的，输入一个用户名就行）</li><li>Trending 入口在第一个层级。只要打开了 OhMyStar 就能让你 Star 。</li><li>增加分享&amp;导入功能。这是我认为 OhMyStar 2 最厉害的设计。不但解决了增加 Star 项目的难题。还获得了互联网变现的入场券。扩展了 OhMyStar 的商业模式。具体功能就是，我在 Tag 上右键的菜单里面有一个分享选项。点击以后，会生成一个包括此 Tag 下的所有项目的网页。你可以把这个网页URL分享给任何一个人。然后，其他用户打开这个网页后，只要安装了 OhMyStar2，点击网页上的导入按钮。就一键导入了这个网页上的所有项目。从此以后，OhMyStar2 就不再是一个单机 App。 它获得了用户之间互动的功能。（PS：可惜我的运营不利造成了目前为止几乎没有人发现使用）</li></ol><h4 id="4-UI-丑陋、老套、过时"><a href="#4-UI-丑陋、老套、过时" class="headerlink" title="4. UI 丑陋、老套、过时"></a>4. UI 丑陋、老套、过时</h4><ol><li>OhMyStar2 的 Logo 著名 UI 设计师藻堂大大友情赞助的作品。2015 年就设计完成。</li><li>OhMyStar2 的大部分 UI 是花费了大价钱请高级设计师 YuXiao Chen 的作品。2016 年中就设计完成。</li><li>OhMyStar2 里面的编程语言图标，是我花了好几天整理出来的。大部分找不到 svg 版本的 icon 都是我一笔一笔画的。</li></ol><p>因为设计稿的完成时间和最终 OhMyStar2 上架有很长的时间间隔。所以仔细看 OhMyStar 2 的话会有一点点设计貌似不是最新的 macOS 规范的感觉。不过相比较 OhMyStar1 来说。这简直是翻天覆地的变化了。（PS：我真的尽力了）</p><h3 id="问题3：OhMyStar2-会不会有-iOS-版本或者其他平台的版本？"><a href="#问题3：OhMyStar2-会不会有-iOS-版本或者其他平台的版本？" class="headerlink" title="问题3：OhMyStar2 会不会有 iOS 版本或者其他平台的版本？"></a>问题3：OhMyStar2 会不会有 iOS 版本或者其他平台的版本？</h3><p>作为一个产品经理的时候，我当然希望 OhMyStar 有 iOS 版本，甚至全平台版本覆盖。不过鉴于真实资源的情况我只能说 iOS 是在计划内的。但是要同时保证最佳体验和数据同步的技术问题，OhMyStar 的 iOS 版本其实难度比想象中的大。不过可以保证的是，OhMyStar iOS 版本的整体产品设计比目前可以看到竞品的产品设计要好上不少。</p><h3 id="问题4：OhMyStar2-是一个什么商业模式？"><a href="#问题4：OhMyStar2-是一个什么商业模式？" class="headerlink" title="问题4：OhMyStar2 是一个什么商业模式？"></a>问题4：OhMyStar2 是一个什么商业模式？</h3><ol><li>采用免费基本功能+订阅解锁高级功能模式。这个貌似不用怎么分析了，已经是主旋律了。</li><li>还记得我设计的分享网页导入导出功能么？曾几何时，我期望所有用户都积极分享自己觉得有价值的项目。然后造成巨大流量。大家争先恐后的分享和传播。这样 OhMyStar 就真的是一个互联网产品了。</li><li>本来我还一直规划一个联盟：去他妈的老子就是永远不降价联盟。因为我认为现在 app 动不动就打折和促销其实是损害了开发商和用户双方的利益。特别是在打折之前购买的用户，心里面可憋屈了。所以具体操作方法大概就是，起草一份 LICENSE 。里面规定了只要使用这个 LICENSE 那这个软件就不能降价了。如果被发现违法协议降价了。那这个开发商就会进入“去他妈的老子就是永远不降价联盟”的黑名单里面，信用度全部丢失。然后这样一份“去他妈的老子就是永远不降价联盟”肯定具备话题传播性。在联合几个独立软件开发商。进行第一次发布。 OhMyStar2 也会获得足够的曝光。一举多得，一箭n雕。</li></ol><p><strong>OhMyStar2 永不降价</strong><br><strong>OhMyStar2 永不降价</strong><br><strong>OhMyStar2 永不降价</strong></p><h3 id="问题5：OhMyStar2-现在用户量多少，收入如何？"><a href="#问题5：OhMyStar2-现在用户量多少，收入如何？" class="headerlink" title="问题5：OhMyStar2 现在用户量多少，收入如何？"></a>问题5：OhMyStar2 现在用户量多少，收入如何？</h3><p>曾几何时，我以为 Free 以后会有大量的用户增长，其实并没有。<br>曾几何时，我以为 OhMyStar2 能帮我养家糊口，然而更加没有。</p><p>OhMyStar2 的日活和月活数量跟 OhMyStar1 几乎一样。</p><p>我觉得我还是算作一个比较良心的开发商。OhMyStar1 的用户都可以免费获得一年的 Pro。导致最核心的目标用户群体没有付费的理由。而且 OhMyStar2 由于我的能力问题，在运营和技术上都没有做的很好。所以尽管有不少好朋友义无反顾的订阅年费。</p><p>但现在的全部收入依然不够支付一年的服务器费用，少到我都不好意思说。所以从经济效益上来看，OhMyStar 亏损相当严重。</p><h3 id="问题6-OhMyStar2-未来会怎么样？"><a href="#问题6-OhMyStar2-未来会怎么样？" class="headerlink" title="问题6: OhMyStar2 未来会怎么样？"></a>问题6: OhMyStar2 未来会怎么样？</h3><p>首先，OhMyStar2 的产品规划进度，远远超出我拥有的开发资源。而我又是一个拖延症晚期，所以迭代速度可能很慢。但是不会立马死掉。</p><p>其次，如果当我决定不在维护 OhMyStar2 的话，我可能会选择开源整个项目。这样至少能留下点什么。</p><p>最后，其实上面也能看出来，OhMyStar2 其实没那么多人用。让我觉得没有特别的成就感。所以如果您恰好看到了这篇文章，恰好有使用了 OhMyStar2，恰好又觉得 OhMyStar2 还有那么一点用。那希望您能多多推荐给周围的朋友。我在此谢谢各位客官老爷了。</p><p><a href="https://itunes.apple.com/us/app/ohmystar2/id1218642292?ls=1&amp;mt=8" target="_blank" rel="noopener">OhMyStar2 下载链接</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实这篇问答在没有发布的时候，我就已经规划在发布应用以后立马写出来进行推广传播。可惜懒癌晚期啊。拖拖拖，拖到了大半年以后。所以很多细节想法和具体取舍决策有模糊不清的感觉。想好好说说，却又杂乱无章。</p><p>在原有的推广规划里面，接下来我应该还会再写一篇 OhMyStar 的技术问答，说一说哪些躺过的坑。希望自己能尽快写出来吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文属于自问自答，解释一些 OhMyStar2 的产品思路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品汪" scheme="http://iiiyu.com/tags/%E4%BA%A7%E5%93%81%E6%B1%AA/"/>
    
      <category term="随便瞎扯" scheme="http://iiiyu.com/tags/%E9%9A%8F%E4%BE%BF%E7%9E%8E%E6%89%AF/"/>
    
      <category term="胡思乱想" scheme="http://iiiyu.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
      <category term="产品思考" scheme="http://iiiyu.com/tags/%E4%BA%A7%E5%93%81%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>罗永浩的进化</title>
    <link href="http://iiiyu.com/2017/05/10/2017-smartisan-digital-conference-view/"/>
    <id>http://iiiyu.com/2017/05/10/2017-smartisan-digital-conference-view/</id>
    <published>2017-05-09T22:38:58.000Z</published>
    <updated>2017-11-07T19:56:50.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="锤子科技的本质"><a href="#锤子科技的本质" class="headerlink" title="锤子科技的本质"></a>锤子科技的本质</h2><p>至少从我能接触到所有信息来看，锤子科技对自己的设定都是一个软件公司，致力于做出对人类有价值的软件。对标的对手是苹果，至少从昨天斗鱼上面的弹幕来看，坚持了这几年的形象输出还是获得了一定的辨识度。比如有弹幕在刷手机参数时，就会有弹幕再解释锤子科技是一个软件厂家而不是硬件厂家。</p><p>不过在我看来，锤子科技是一个由个人魅力和先描绘一个完美理想而组成并且处于孩提时代的公司。而现实世界在有一次又一次的打击在不断的教育着他。不过此时此刻来看，至少锤子科技还活着不是吗？</p><p>因为锤子科技的最核心和最大价值是罗永浩，而罗永浩首先对应的是其实是广义的精英人群。整个发布会上很多佐证的证据，比如用户群体跟 iPhone 的用户群体高度重合。比如发布会上孜孜不倦的在讲授深度集成的功能。再比如那“有一千种赚钱方式，我就偏偏选择最困难的一种。”的情绪宣泄。</p><a id="more"></a><p><img src="https://ws1.sinaimg.cn/large/006LEcNugy1ffg2qvhzytj32vd1x7hdw.jpg" alt=""></p><p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="锤子科技的进化"><a href="#锤子科技的进化" class="headerlink" title="锤子科技的进化"></a>锤子科技的进化</h2><p>锤子活了下来，靠的不是运气。是不断的进化，罗永浩的进化。</p><p>罗永浩逐渐的进化为一个商人，这个其实是锤子能活下来很重要的一点。仅仅依靠一味的精雕细琢产品是没办法作出一个普罗大众都能受益的产品。但是活下去才是改变世界最根本的基础条件。而生活质量的提高会助力创造力的解放。所以我认为锤子科技要改变世界的终极目标之前，是能尽快的赚钱，赚大钱。而罗永浩显然没有到哪种放低身段在一个臭水潭里面跟一堆饿狼争食。</p><p>也行坚果 Pro 是锤子科技进化以后在当下做的最好的答卷了吧。</p><h2 id="效率-VS-易用-进而产生的问题"><a href="#效率-VS-易用-进而产生的问题" class="headerlink" title="效率 VS 易用 进而产生的问题"></a>效率 VS 易用 进而产生的问题</h2><p>看完以后整个发布会后，其实我有点被感动，有点惋惜。感动的是锤子科技在几个强迫症产品经理的带领下，把一些场景下的效率提高了很多。 惋惜的是这注定不是普罗大众的产品。 </p><p>高效率和高易用就是天生相克的，在一定科技生产力下目前看来是成立的。 举几个例子，飞机比汽车快，操作起来飞机比汽车复杂。Emacs 和 Vim 比记事本要有效率，上手难度大家心知肚明。</p><p>所以，发布会上罗永浩和锤子科技用了剧情反转和巨大的篇幅来介绍整个 Smartisan OS 中三个深入的功能集成。 剧情反转为的是注意力不要被硬件分散注意力。长时间的演示是为了，真的是为了想把这些提高效率的功能讲清楚而已。</p><p>抛开是否原创的问题， One Setp， BigBand，Idea pills。能这样深度的集成到系统里面。其实真的非常非常不容易。自己做过开发知道按时发布，演示时候顺利通过是需要付出多少努力。在能够想象的场景里面确实提高了效率。 而且当你学习越多，使用更多的时候。在特定场景下，就是效率神器。而且我认为在效率上去做努力，进而切到移动效率平台上，貌似是有价值的。iPad 不就是切这个领域为目标么。</p><p>但是，随之而来的就是，本来就是精英用户人群的市场，在进一步切到了精英用户中高效率用户人群。目标人群进一步缩窄。在面临着赚钱，赚大钱的这样阶段上，从纯粹赚钱的角度来说，坚果 Pro 和 Smartisan OS 并没达到一个较好的预期。</p><p>在我的世界观里面，绝大部分人类还是遵循着一些原始的行为。 比如偏爱高热量的食物、看书就发困、在夜深人静依靠着荷尔蒙在摇一摇等。如果需要做一个爆款产品，在同一科技水平下很可能不会是一个高效率的产品，但一定是一个易用的产品。举个例子：我认为 Slack 比 Wechat 要高效的多。 Wechat 比 Slack 易用的多。 所以 Wechat 比 Slack 用户多的多的多。 很多时候在大科技的同一水平下，人类并不会太过追求效率。</p><p>所以，有点惋惜。只是在今天，我看不出坚果 Pro 是一个爆品手机。</p><p>再举一个类似的例子，但是我认为是爆品手机的例子是美图手机。 因为解决拍照好不好看这个用户痛点的价值在我看来比高效的编辑一段文字要有值钱的多。</p><p>恰好在微博看见了这两个有趣的图<br><img src="http://ww4.sinaimg.cn/bmiddle/bf65f0b2ly1fffzyephosj20hm0m8jux.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/bmiddle/bf65f0b2ly1fffzye5fl8j20lc0m8acj.jpg" alt=""></p><p>再意淫一下，如果现在我有资源能做一款手机，我会把打王者荣耀上分容易作为这款手机的最大卖点。</p><h2 id="发布会上几个可以改进的地方"><a href="#发布会上几个可以改进的地方" class="headerlink" title="发布会上几个可以改进的地方"></a>发布会上几个可以改进的地方</h2><ol><li>请一定要按时开始</li><li>发布会节奏简练一些</li><li>老罗做串场和最关键演示，多几个人分段。（一个人做整场，需要花费的精力和效果没发保证）</li><li>口头禅 “听明白了吗？” 配合着介绍着那些高效率的功能，有种还在新东方的即视感。（我没注意到，萌小萌说很突兀）</li><li>好不容易做了接近整场的企业家罗永浩，到最后情绪激动时候还是没有绷住。变为了老罗，脱口而出了今天我在微博上看到转发最广的这句话“如果有一天，卖了几百几千万台，SB都在用我们的手机，你要知道这是给你们做的。”（一声叹息）</li></ol><h2 id="少年的英雄主义"><a href="#少年的英雄主义" class="headerlink" title="少年的英雄主义"></a>少年的英雄主义</h2><p>去现场看一看老罗，听一听老罗的单口相声一直是一个心愿。</p><p>那天大麦网两点放票， 结果有事情，忙完以后都四点多。我点过去已经没票了。 </p><p>老罗在我心中一直是一个很特别的存在。每次提起老罗，我的思绪都会飘荡在10多年前的高三教室某个下午，老师在说着无聊的卷子。我猫在教室的后排用一个廉价的 mp3 听着网络上下载的老罗语录。听到好笑的部分，憋着满脸通红的抖动。至今我都能回忆起来“华盛顿的樱桃树”，“俞敏洪在拉斯维加斯的离婚感慨”，“手心手背都是肉，掐一下手背更疼”，“如何减肥”，“走在大街上被查居住证，如何应对”。那个声音在一定程度上使我成为了今天的我。</p><p>以至于后面自己创业的时候，也是按照这样的思路去做。结果就是不赚钱儿。 没人理你。所以一直传言锤子要倒闭的消息，我是认为锤子科技真的过的很艰难。</p><p>所以，老罗作为一个商人、企业家。把自己的价值贡献出去，尽可能的在挽救公司。我认为是商人罗永浩进化的一面。也是怼天怼地的老罗悲壮的一面。 </p><p>我更喜欢我记忆里面那个在新东方课堂上被录音的老罗。随意的怼天怼地怼世界。</p><p>当然我也很希望看到一个怀着理想主义的商人罗永浩站着，克服了千辛万苦站着把钱给挣了。这样至少证明这样做事是可以成事的。世界可能会变的那么美好一点点。 当然最后的代价可能是老罗的消失和完全体的商人罗永浩了吧。</p><p>可是最后没崩住那句高高在上的态度，说用户是傻逼。 说前一代设计是耻辱的时候。我不知道用户怎么想，我不知道锤子员工怎么想。至少如果同一时间要变成老罗和商人罗永浩是不可兼得。这样的混合着老罗&amp;商人罗永浩我不想看到。</p><p>所以，还是希望罗永浩能变成一个成功纯粹的商人。把老罗留在 mp3 文件里面吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;锤子科技的本质&quot;&gt;&lt;a href=&quot;#锤子科技的本质&quot; class=&quot;headerlink&quot; title=&quot;锤子科技的本质&quot;&gt;&lt;/a&gt;锤子科技的本质&lt;/h2&gt;&lt;p&gt;至少从我能接触到所有信息来看，锤子科技对自己的设定都是一个软件公司，致力于做出对人类有价值的软件。对标的对手是苹果，至少从昨天斗鱼上面的弹幕来看，坚持了这几年的形象输出还是获得了一定的辨识度。比如有弹幕在刷手机参数时，就会有弹幕再解释锤子科技是一个软件厂家而不是硬件厂家。&lt;/p&gt;
&lt;p&gt;不过在我看来，锤子科技是一个由个人魅力和先描绘一个完美理想而组成并且处于孩提时代的公司。而现实世界在有一次又一次的打击在不断的教育着他。不过此时此刻来看，至少锤子科技还活着不是吗？&lt;/p&gt;
&lt;p&gt;因为锤子科技的最核心和最大价值是罗永浩，而罗永浩首先对应的是其实是广义的精英人群。整个发布会上很多佐证的证据，比如用户群体跟 iPhone 的用户群体高度重合。比如发布会上孜孜不倦的在讲授深度集成的功能。再比如那“有一千种赚钱方式，我就偏偏选择最困难的一种。”的情绪宣泄。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PM" scheme="http://iiiyu.com/tags/PM/"/>
    
      <category term="产品汪" scheme="http://iiiyu.com/tags/%E4%BA%A7%E5%93%81%E6%B1%AA/"/>
    
      <category term="随便瞎扯" scheme="http://iiiyu.com/tags/%E9%9A%8F%E4%BE%BF%E7%9E%8E%E6%89%AF/"/>
    
      <category term="胡思乱想" scheme="http://iiiyu.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>被误解的微信小程序</title>
    <link href="http://iiiyu.com/2017/01/22/Be-misunderstood-of-the-miniapp/"/>
    <id>http://iiiyu.com/2017/01/22/Be-misunderstood-of-the-miniapp/</id>
    <published>2017-01-21T21:14:53.000Z</published>
    <updated>2017-11-07T19:57:11.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自媒体的瞎几把解读"><a href="#自媒体的瞎几把解读" class="headerlink" title="自媒体的瞎几把解读"></a>自媒体的瞎几把解读</h2><p>前几天一篇《小程序上线7天，罗胖带着1000万用户跑了……》到处都能看见，而里面就罗振宇的一个微信聊天截图而已。搞得好像仿佛微信掉了1000万日活似的。好像得到的那些用户就不用微信似的。都TM瞎几把跟着起哄。当下这个时间点怎么看着黑小程序变成了一个政治正确的事情。跟两三个月前万众瞩目，全民吹捧形成了巨大的反差。</p><p>所以，需要带着独立思考去看待小程序这个事情。对理解小程序、理解这个世界的基本前提。</p><p>其实吧，不必把小程序这么妖魔化。在我看来这是微信进化自然的结果。不负责任的猜想，类似的进化应该也在 Facebook、Line 里面发生着。（PS：支付宝那个小程序技术上算同类型，但是我觉得产品上不是一个东西。因为支付宝本来就不应该是微信 Copy 啊）</p><a id="more"></a><p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><p><img src="https://ww2.sinaimg.cn/large/006y8lVagy1fbzeytom91j30dw0a5tag.jpg" alt=""></p><h2 id="微信-OS-？"><a href="#微信-OS-？" class="headerlink" title="微信 OS ？"></a>微信 OS ？</h2><p>要弄清小程序，首先要弄清楚什么是微信。小程序为什么诞生在现在这个时间点？是因为微信自身发展进化到了一个操作系统！</p><p>传统操作系统是什么，是管理计算机硬件与软件资源的计算机程序，它提供了进程管理、内存管理以及磁盘与文件系统等等基础功能，而在这个基础功能上，我们才能提供使用这些资源开发出来的更多的软件比如：Office、Photoshop、游戏等等。为人类带来价值的事情。</p><p>如果微信已经是一个操作系统。这个观点并不是我第一个提出，很早之前就有人在说这个话了。微信是一个操作系统这个怎么来理解呢？</p><p>在我个人来看在小程序之前，微信都是在进化成接管所有用户的使用入口。把基于硬件之上的真正的操作系统，又再一次的抽象和封装了起来。这样的进化结果有：</p><ol><li>所有用户都可以用微信作为主要移动互联网的使用基础平台。</li><li>超越了不同硬件和不同平台。iOS 用户和 Android 用户的大统一。</li></ol><p>微信操作系统的基本元素是基于社交关系和 IM 的基本功能，所以如果以传统操作系统的思维去思考肯定行不通。</p><h2 id="微信小程序的正确姿势"><a href="#微信小程序的正确姿势" class="headerlink" title="微信小程序的正确姿势"></a>微信小程序的正确姿势</h2><p>首先，明确一下概念：</p><ol><li>不要以做 App 的思路做小程序！</li><li>不要照搬 App 的样子做小程序！</li><li>不要觉得 App 是什么小程序就要做到什么！</li></ol><p>最简单的道理就是 App 是简历在手机操作系统上的产物，你用手机操作系统为基础的产品思路去弄了微信操作系统上的小程序产品。怎么可能做的好么。</p><p>微信操作系统的特点：</p><ol><li>做到了中国境内迄今为止最大的用户覆盖</li><li>几乎做到用户唯一识别</li><li>有最好的移动互联网沟通体验</li></ol><p>然后，我认为小程序适合做什么：</p><ol><li>通过二维码连接人与万物，本质是连接物后面的服务。</li><li>做微信操作系统的功能增强，简单说来就是 IM 插件。</li></ol><p>举两个例子：</p><ol><li>共享单车特别适合这个人与物连接的场景，最大的价值是用户使用了单车服务。线上产品不论是 App 还是小程序都只是为了连接人和单车的关系然后提供服务。所以，我坚信除非这些共享自行车企业倒闭。只要做了小程序的，我相信在不远的将来小程序里面的使用量一定会超过自己的 App。</li><li>知道 Slack 不。 如果你的产品能增强现有微信的聊天功能，一定是微信操作系统下需要的东西。针对细分聊天情景下的聊天增强辅助一定是有价值的。如果还是无法想象，那去搜索一个叫“动动文字”的小程序试试看。</li></ol><p>所以只有对自己提供的服务和微信生态有深入的了解。才能思考产品价值和微信生态之间共处的关系。设计基于小程序的产品，业务流程都会为了适应微信生态发生改变。信任微信操作系统这一基本建设，才是做一个合格微信小程序的前提。你把 App 整个思路搬进来，我个人是呵呵呵的态度。</p><h2 id="对微信的期望"><a href="#对微信的期望" class="headerlink" title="对微信的期望"></a>对微信的期望</h2><p>虽然现在小程序开放的功能有限。但是微信如果真的是以一个操作系统方向去进化的话，功能增强指日可待。我能想象一堆协同服务的都只用专注于服务。而不用在纠结 IM 上的基本功能。 </p><p>罗马不是一天建成的， iOS 也不是第一天就有这么多功能的。在2017年1月这个时间点里面。我依然对微信未来的进化会变的更好。</p><h2 id="最后的碎碎念"><a href="#最后的碎碎念" class="headerlink" title="最后的碎碎念"></a>最后的碎碎念</h2><p>对了，我也觉得微信封闭不好。但是从宏观来说微信封闭是历史选择进化的部分，不想细说。只是作为被国内同行衬托的一股清流。给微信多一点期待还是一件自然而然的事情。希望微信真的能做到微信操作系统的那一天，我拭目以待。           </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自媒体的瞎几把解读&quot;&gt;&lt;a href=&quot;#自媒体的瞎几把解读&quot; class=&quot;headerlink&quot; title=&quot;自媒体的瞎几把解读&quot;&gt;&lt;/a&gt;自媒体的瞎几把解读&lt;/h2&gt;&lt;p&gt;前几天一篇《小程序上线7天，罗胖带着1000万用户跑了……》到处都能看见，而里面就罗振宇的一个微信聊天截图而已。搞得好像仿佛微信掉了1000万日活似的。好像得到的那些用户就不用微信似的。都TM瞎几把跟着起哄。当下这个时间点怎么看着黑小程序变成了一个政治正确的事情。跟两三个月前万众瞩目，全民吹捧形成了巨大的反差。&lt;/p&gt;
&lt;p&gt;所以，需要带着独立思考去看待小程序这个事情。对理解小程序、理解这个世界的基本前提。&lt;/p&gt;
&lt;p&gt;其实吧，不必把小程序这么妖魔化。在我看来这是微信进化自然的结果。不负责任的猜想，类似的进化应该也在 Facebook、Line 里面发生着。（PS：支付宝那个小程序技术上算同类型，但是我觉得产品上不是一个东西。因为支付宝本来就不应该是微信 Copy 啊）&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品汪" scheme="http://iiiyu.com/tags/%E4%BA%A7%E5%93%81%E6%B1%AA/"/>
    
      <category term="随便瞎扯" scheme="http://iiiyu.com/tags/%E9%9A%8F%E4%BE%BF%E7%9E%8E%E6%89%AF/"/>
    
      <category term="胡思乱想" scheme="http://iiiyu.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
      <category term="产品思考" scheme="http://iiiyu.com/tags/%E4%BA%A7%E5%93%81%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>2017年世界进化论</title>
    <link href="http://iiiyu.com/2017/01/20/2017-world-theory-of-evolution/"/>
    <id>http://iiiyu.com/2017/01/20/2017-world-theory-of-evolution/</id>
    <published>2017-01-20T03:39:04.000Z</published>
    <updated>2017-11-07T19:57:40.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="世界观"><a href="#世界观" class="headerlink" title="世界观"></a>世界观</h2><p>我认为在2017之初，人类文明世界将进入一个新的阶段。不过回顾人类历史，相似的情况时有发生。所以这应该能用螺旋式的上升来说明情况。所以本文会以作者自己的视角来阐述几个思考过的方向。并且简单下结论。</p><a id="more"></a><p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="人类文明世界"><a href="#人类文明世界" class="headerlink" title="人类文明世界"></a>人类文明世界</h2><p>得力于科技进步，在过去的100年的时间里面。整个地球上的人类文明世界进行了前所未有的交流和融合。特别是过去30年里面基于互联网的全球化，让地球上人与人之间的交流变的唾手可得。产生了不可想象的信息和前所未有的巨大财富。同时全球化的黑暗面也一同长大。</p><p>这两年发生的大事件——欧洲难民问题、川普当选总统、英国退欧等等。都揭示着，全球化带来的副作用已经开始蔓延。</p><p>在基于自私人性的考量下。 人类文明世界将从之前100年的全球化发展。逐渐变成局部自己跟自己玩的发展。毕竟“一室之不治，何以天下家国为？” 这是人类文明世界的自我进化。属于历史洪流无法抵挡和改变。</p><h2 id="互联网世界"><a href="#互联网世界" class="headerlink" title="互联网世界"></a>互联网世界</h2><p>我接触互联网根深蒂固的思想免费、开放。得力于免费和开放，互联网的信息量在过去20年间增长数量应该每年都会刷新之前的总和。我们称为信息大爆炸。可是人生100来年。整个世界的信息量对个人来说是远远过剩的。无门槛的免费和开放不再具备更多的吸引力。所以我们能看到做信息筛选和信息推荐的公司迅猛发展。把握着社交关系的巨头们都在逐渐的封闭自己。</p><p>所以下一个20年的互联网世界真的会不太一样。会变的更加封闭，更加聚焦领域。</p><h2 id="地球新世界"><a href="#地球新世界" class="headerlink" title="地球新世界"></a>地球新世界</h2><p>AlphaGo 先赢李世石后用马甲在各大围棋网站横扫顶尖职业棋手。貌似预示着一个智能的新纪元的开启。我不禁思考人类的本质和我自己存在的意义。 </p><p>如果从最大的广义宇宙来说，整个里面的物质都是恒定的。里面有什么东西都不重要。那作为一个生命体是为什么存在？那作为一个智慧体又是为什么存在。</p><p>存在的意义在我18岁的时候无法明白，到28岁的时候还是一样无法明白。而现在我能想清楚一个事情就是。从地球上第一个有机物到我这里，都在做一个事情——那就是进化。</p><p>进化其实是没有目标的，只是环境选择了一些进化得以延续。一些进化消亡了。</p><p>随便说一句，很小的时候我就在想，凭什么智慧都必须建立在碳水化合物上。就因为我们自己是碳水化合物么？就不能是几根排列玄妙莫测的石柱子，一个内回旋特别的岩洞。自己经过千百万年的进化，自动的产生了更加高明的智慧么？我们无法理解的智慧。</p><p>说回来，难道你们觉得人类作为一个智慧生物。在当下这种科技和信息爆炸的时代。我们的肉体和灵魂进化实在是太落后了。简单来说一个人类需要18年消耗无数资源才能到达一个勉强智慧的个体。而且当千辛万苦获得了大智慧以后，100年后必定消亡，无法延续，无法直接继承。</p><p>而且作为人类这样的智慧体，还有各种缺陷。生物欲望，黑暗面欲望。如果把地球文明看作一个整体进化的话。人类这样的基本个体几乎太不合适了。</p><p>但是现在，我能看到下一个阶段地球文明进化的基本个体——机器智能。人工智能的说法只是一厢情愿，将来的机器一定比我们不知道高明到那里去。</p><p>所以最后说我的结论，在今后的这100年里面。人类最重要的进化已经不是通过生产下一代人类来完成。而是做出来一个类似电影终结者里面天启类似的机器智能。替代人类作为地球文明继续在宇宙里持续进化。一直到下一次文明的新个体替代出现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可能写的有些凌乱，但是这样想法一直一直在我脑海里面游荡。所以我还是决定把它们写下来。作为一个智慧体对这个世界当下的思考。与君共勉。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;世界观&quot;&gt;&lt;a href=&quot;#世界观&quot; class=&quot;headerlink&quot; title=&quot;世界观&quot;&gt;&lt;/a&gt;世界观&lt;/h2&gt;&lt;p&gt;我认为在2017之初，人类文明世界将进入一个新的阶段。不过回顾人类历史，相似的情况时有发生。所以这应该能用螺旋式的上升来说明情况。所以本文会以作者自己的视角来阐述几个思考过的方向。并且简单下结论。&lt;/p&gt;
    
    </summary>
    
    
      <category term="胡思乱想" scheme="http://iiiyu.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>2016年中国社交产品分析个人报告</title>
    <link href="http://iiiyu.com/2016/09/27/2016-Social-Product-Analysis/"/>
    <id>http://iiiyu.com/2016/09/27/2016-Social-Product-Analysis/</id>
    <published>2016-09-27T01:49:43.000Z</published>
    <updated>2017-01-22T07:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景分析"><a href="#背景分析" class="headerlink" title="背景分析"></a>背景分析</h1><h2 id="这是最好的时代，也是最坏的时代"><a href="#这是最好的时代，也是最坏的时代" class="headerlink" title="这是最好的时代，也是最坏的时代"></a>这是最好的时代，也是最坏的时代</h2><p>2016年，号称直播元年。</p><p>因为手机的普及率更加广阔了，手机的性能上来了，网络速度更快了。</p><p>所以大趋势是产品</p><p><img src="http://ww3.sinaimg.cn/large/006y8lVagw1f888f7ufokj30cy01k744.jpg" alt=""></p><p>这是大技术环境决定产品的走向。所以，一定存在社交产品的机会在里面。</p><p>以下的产品分析主要从移动端的视角出发。</p><a id="more"></a><h1 id="两大巨头——微信和微博"><a href="#两大巨头——微信和微博" class="headerlink" title="两大巨头——微信和微博"></a>两大巨头——微信和微博</h1><p>微信是连接人与人</p><p>微博是连接人与资讯</p><p>所以他们的社交形态也是迥异的。</p><p>直接说结论吧：</p><p>微信和微博是不同形态的产品。相互不可替代，而且微博最近一两年发展巨好。微博的股票就能说明这个问题。</p><p>如果想要通过相同产品思路想要做大，就算利用运营切入一个细分领域，我认为都没戏。更不要说是要干掉他们。那种东西没想象空间，没活路。</p><h1 id="现有产品分析"><a href="#现有产品分析" class="headerlink" title="现有产品分析"></a>现有产品分析</h1><h2 id="直播"><a href="#直播" class="headerlink" title="直播"></a>直播</h2><p>直播的社交模式我认为比较奇特，呈现出一对多的形式。主播对多个观众，多个观众对少量主播。观众都大部分时间是希望跟主播互动。而观众和观众之间的互动并不频繁。所以直播方式跟我理想中人人都是平等的社交方式是违背的。多说一句，也只有微信在用户端做到了人人平等（PS:对开发者特别是独立开发者，微信还是很严的。虽然能理解，但是作为一个有想法的小个体还是忍不住吐槽一下）</p><p>我预测直播经济在1年之内依然会是一个高速增长的市场，但是增速会放慢。并且政策入场和巨头布局会清洗一波产品。如果没有特别特别好的理由和资源，这个时候在切入当前模式下的直播社交是不明智的。</p><p><strong>总结：我觉得我做不了直播类型的社交产品</strong></p><h2 id="陌生人社交"><a href="#陌生人社交" class="headerlink" title="陌生人社交"></a>陌生人社交</h2><p>我个人认为社交产品一定一定是绕不开性的。不但如此，我还认为陌生人社交的基石一定是基于人体内基因隐含的交配欲望和渴望获得多巴胺分泌的本能行为。</p><p>虽然陌陌很想摆脱约炮神器的限定范围。我认为能在上面约到炮，算是一个陌生人社交的及格线。</p><p>前两天也看了探探新 CTO 的一篇 Blog，对里面的一些观点惺惺相惜之感。因为男性用下半身思考和女性比较含蓄和谨慎的特点。所以我认为所有的陌生人社交都应该是站在一个普通女性用户的角度去设计。这样才能带来最大的平台化利益。这个懂得也都懂。就不展开说了。</p><p><strong>总结：如果我要做一款陌生人社交的产品，我会做一个婚恋 App。马佳佳曾经做个一个叫极简的产品。类似一个新时代的个人简历，我认为很适合改吧改吧就成一个婚恋社交产品。其中有个功能我印象很深刻，就是选几个问题，自己拍一段小视频来回答。以便他人更好的了解你。这不就是非诚勿扰的 VCR 环节嘛。我认为会是如果能做一定是一个很好的婚恋 App</strong></p><h2 id="兴趣社交"><a href="#兴趣社交" class="headerlink" title="兴趣社交"></a>兴趣社交</h2><p>这里比如有游戏、有二次元、有追星。如果说是细分领域，这三个领域都足够大，市场量足够撑起一家独角兽规模的公司（个人认为）。</p><p>但是同时也是一个特别特别拼资源、拼运营的产品方向。在当下，我认为很难凭单借一个好的产品形态和创意去切入。</p><p><strong>总结：如果真的要做一个类似的产品，一定是建立在有强大资源和给力运营的基础上。要不很难</strong></p><h2 id="校园社交"><a href="#校园社交" class="headerlink" title="校园社交"></a>校园社交</h2><p>我一直觉得校园社交是一个不太好的方向。 我认为 Facebook 不是校园社交起来，而只是从校园里面运营起来的。当年校内网改名人人网，我一直觉得是一个很棒的决定。</p><p>为什么校园社交不是一个很好的方向。最重要的理由就是目前能看到的校园社交产品都是专门为校园场景打造的。会造成以下影响：</p><ol><li>用户数量确定，因为当4年后大家毕业进入社会。失去了校园场景，校园社交产品也就失去了使用的价值。也就是说每年都固定的失去用户数量。</li><li>无法获取校园场景以外的新用户，还是场景限定的结果。 </li></ol><p>所以，我认为目前能看见到的一些主打校园社交的产品都没能很好的解决上面这个问题。</p><p><strong>总结：如果我要做一个校园社交类的应用，我会从按照高中用户开始做起一直做到大学，以学校为最小颗粒度，然后是区，市，省来划分运营。运营发力在每年的校花，校草评选。日常运营着重于学校八卦。可能相对的贴吧是最大的竞争对手之一。看过美剧Gossip Girl吧。 专门说学校八卦的用户粘性肯定好</strong></p><h2 id="LGBT社交"><a href="#LGBT社交" class="headerlink" title="LGBT社交"></a>LGBT社交</h2><p>其实可以归为陌生人社交一类。但是由于群体的特点和日渐开放的民智。最近几年也是冒出不错的产品出来。属于一个细分领域，也会出一、两家领域龙头最后通吃。</p><p><strong>总结：估计我很难做这类的产品，因为确实缺乏相关经验</strong></p><h2 id="Snapchat的中国制造"><a href="#Snapchat的中国制造" class="headerlink" title="Snapchat的中国制造"></a>Snapchat的中国制造</h2><p>Snapchat 从火了到现在。我听过好多小朋友说我们应该有一个这样的东西。 如果说微信是中国 Facebook 的话。 那我们也应该有一个中国的 Snapchat。</p><p>目前我能看到想做中国 Snapchat 的并且我觉得比较不错的有 FaceU、闪聊、Remark。</p><p>FaceU 不多说了， 闪聊的启动视频我觉得传递的信息好棒是我今年以来看过最棒的 App 产品视频。Remark 是我来深圳以后结识的一群很年轻的朋友做的，他们目前的 Slogan 我觉得很棒叫“分享比留下更重要”。</p><p>这三个目前我觉得闪聊做的比较有趣一点、接地气一点但是逼格就显得不那么高。</p><h2 id="职场社交"><a href="#职场社交" class="headerlink" title="职场社交"></a>职场社交</h2><p>Linkined、脉脉和会会等应该能算职场社交吧。我的感觉是脉脉上正经的消息没啥亮点。但是经常在 QQ 群上能看见匿名爆料企业和同事的种种秘闻截图分享。所以我觉得还是人类深处的偷窥八卦欲望才是这类产品日活的关键所在啊。</p><h2 id="IM"><a href="#IM" class="headerlink" title="IM"></a>IM</h2><p>如果社交产品算上 IM。我还想说一下 Telegram 、Slack 和 iMessage。 </p><p>Telegram 我最直观的感受就是快，那种消息在相互之间传递的快能被作为用户的我在使用过程中感受出来，我认为这就是最核心的竞争力。当然安全之类的其他因素也是基石。但是用 Telegram 我会觉得聊天时一件轻松简单的事情。</p><p>Slack 作为一个团队提高协作效率的 IM 来说。目前我无可挑剔，能集成第三方的插件，让所有的协作工作都可以由 Slack 发起完成以后又回到 Slack 的体验真的是棒极了。如果硬要说缺点的话就是在中国的速度和高级版本是按照人头收月费的。</p><p>iOS 10 的 iMessage 在消息发送上增加了很多有趣的效果，开放了贴纸商店。使得本来一个低配版本的微信提高到了一个中高配版本。也许 iMessage 的消息效果并没有多大的技术难度。但是为什么 Apple 要怎么做。我觉得是为了让<strong>用手机聊天的过程充满乐N趣</strong>。这点是我认为最重要的事情，也是我觉得这一步虽然不是红利期，但是 Apple 还是没有放弃 IM 这个战场。  </p><h2 id="其他想说的"><a href="#其他想说的" class="headerlink" title="其他想说的"></a>其他想说的</h2><p>Same 机缘巧合去拜会过总部，拿过一堆他们的贴纸好喜欢。 也好喜欢创始人说的把关系做轻，让用户没有负担。里面的妹子质量也特别特别高。拿到了很多钱钱，但是目前用户体量也是没有更加进一步的扩展。期待后续的动作。</p><p>快手在五道口默默替换掉网易 Logo 的公司。第一次看见的时候却是心里觉得里面内容有点 Low。但是最近半年在看到快手，就是满满的敬佩之情。他们触及了中国互联网之前难以触及的用户人群。但这一点我就觉得快手是一个非常非常成功的产品。</p><h1 id="我会尝试的方向"><a href="#我会尝试的方向" class="headerlink" title="我会尝试的方向"></a>我会尝试的方向</h1><p>说了这么多有的没得，如果让我选择在当下中国一个社交新产品。</p><p>我会做一个主要用户人群是二、三、四线城市的 95 后，，基于图片、短视频处理后在聊天方式上很有趣的社交产品。</p><p>具体是什么样子，要真的开始做了，才会知道吧。毕竟空想的 idea 不值一钱。</p><p>以上是这两天以来的胡思乱想，谢谢您的观看。如有异议，欢迎讨（si）论（bi）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景分析&quot;&gt;&lt;a href=&quot;#背景分析&quot; class=&quot;headerlink&quot; title=&quot;背景分析&quot;&gt;&lt;/a&gt;背景分析&lt;/h1&gt;&lt;h2 id=&quot;这是最好的时代，也是最坏的时代&quot;&gt;&lt;a href=&quot;#这是最好的时代，也是最坏的时代&quot; class=&quot;headerlink&quot; title=&quot;这是最好的时代，也是最坏的时代&quot;&gt;&lt;/a&gt;这是最好的时代，也是最坏的时代&lt;/h2&gt;&lt;p&gt;2016年，号称直播元年。&lt;/p&gt;
&lt;p&gt;因为手机的普及率更加广阔了，手机的性能上来了，网络速度更快了。&lt;/p&gt;
&lt;p&gt;所以大趋势是产品&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006y8lVagw1f888f7ufokj30cy01k744.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是大技术环境决定产品的走向。所以，一定存在社交产品的机会在里面。&lt;/p&gt;
&lt;p&gt;以下的产品分析主要从移动端的视角出发。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PM" scheme="http://iiiyu.com/tags/PM/"/>
    
      <category term="产品汪" scheme="http://iiiyu.com/tags/%E4%BA%A7%E5%93%81%E6%B1%AA/"/>
    
      <category term="随便瞎扯" scheme="http://iiiyu.com/tags/%E9%9A%8F%E4%BE%BF%E7%9E%8E%E6%89%AF/"/>
    
      <category term="产品思考" scheme="http://iiiyu.com/tags/%E4%BA%A7%E5%93%81%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>新 iOS Human Interface Guidelines  产品解读 （一）</title>
    <link href="http://iiiyu.com/2016/06/14/2016-iOS-Human-Interface-Guidelines-1/"/>
    <id>http://iiiyu.com/2016/06/14/2016-iOS-Human-Interface-Guidelines-1/</id>
    <published>2016-06-14T11:11:34.000Z</published>
    <updated>2017-01-22T07:11:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><a id="more"></a><h2 id="What’s-New-in-iOS-10"><a href="#What’s-New-in-iOS-10" class="headerlink" title="What’s New in iOS 10"></a>What’s New in iOS 10</h2><ol><li>小部件<br><img src="https://developer.apple.com/ios/human-interface-guidelines/images/whatsnew_widgets.png" alt=""></li><li>整合Message<br><img src="https://developer.apple.com/ios/human-interface-guidelines/images/whatsnew_messaging.png" alt=""></li><li>整合Siri<br><img src="https://developer.apple.com/ios/human-interface-guidelines/images/whatsnew_siri.png" alt=""></li><li>扩展通知<br><img src="https://developer.apple.com/ios/human-interface-guidelines/images/whatsnew_notifications.png" alt=""></li></ol><h2 id="产品解读"><a href="#产品解读" class="headerlink" title="产品解读"></a>产品解读</h2><h3 id="小部件"><a href="#小部件" class="headerlink" title="小部件"></a>小部件</h3><p>小部件目前感觉用处不大啊，虽然进化了更加强大。但是个人在之前的使用并不多。另外现在一按Home就指纹识别进去了。暂时觉得停留在锁屏的情况略少。</p><h3 id="整合Message"><a href="#整合Message" class="headerlink" title="整合Message"></a>整合Message</h3><p>Message 杀入已经不知道竞争有多激烈的 IM 战场。时机看上去偏向略晚，但是有些事情虽然做了有99%失败的可能，但是如果不做的话，那就是完全没可能。在 iOS 10 之前， Message 对我来说只是一个短信的补充，方便我跟用 iPhone 的朋友不需要用短信联系。随着6月14日凌晨的发布以后，看上去做为更加开放的 iOS 生态中重要的一个环节， Message 允许其他应用的调用以后。用户整个关系链就从通讯录直接变成了整个 iPhone。 你们 Facebook、 WeChat、Snapchat 不是号称是巨无霸 App 么。说将来只需要安装这些App就好了，这样其他应用要怎么活啊。Apple 把 Message 这种系统级别的功能开放出来，意味着让关系链从系统级别植入到App，也能缓解一些巨无霸 App 取代系统的趋势。</p><p>举个例子：比如说我有个工具类美颜App，想要变成一个社交属性。直接去维护一个用户系统和关系链要投入多少啊，现在只要接入Message，关系链立马就获取到了。我认为是对小型团队和独立开发者是利好消息。由此往下想的话，Message里面迟早会出现类似朋友圈的东西？</p><p>当然 Message 做为 IM 的缺点显而易见。 Apple 封闭的生态环境里面。 Apple 整个系列都可以使用的很爽，但是放到真实的我们这个接近八成都用 Android 的世界里面。仅仅只是 iPhone 关系链是无法做到一个全世界的 IM 的。像不像微软一样，踏不踏入敌人的领域里面去开疆拓土，这是一个我只能静观其变的结果。</p><p>PS：开放出发送消息的接口，会不会被国内众多的垃圾信息所利用也是值得当心的一点。</p><h3 id="整合Siri"><a href="#整合Siri" class="headerlink" title="整合Siri"></a>整合Siri</h3><p>从 Siri 出现的第一天起，我就不止一次的 YY Siri 能用到自己的产品上，那种在10年或者20年前电影里面的人工智能场景，终于离我们的生活更加进了一步。</p><p>同整合 Message 一样， Siri 的开发 API，为应用的入口增加了一种可能性，让应用跟 iPhone 继续的浑然天成。虽然说对着 iPhone 自顾自的说话确实有点傻，但是我拿Siri定个闹钟，记个提醒事项还是很方便的。所以等待合适场景的App出现，Siri 的利用率会越来越高的。</p><h3 id="扩展的通知消息"><a href="#扩展的通知消息" class="headerlink" title="扩展的通知消息"></a>扩展的通知消息</h3><p>在通知消息上可以定义更多的功能和事件，在一些不想解锁的情况下提高效率。举个例子：欧洲杯刚刚结束一场比赛，一个App推送比分过来，你想知道谁进的球，只用双指一扩，就可以看到比赛的简报，简单方便。</p><p>简单的来说是通知可以做的事情更多了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前为止，我看到大量的 3D Touch 技术在 iOS 10 上的应用。也就是说当前 iPhone 的保鲜期为1年，2年前买的 iPhone 6 和 iPhone 6 Plus 已经不能享受最新的 iOS 版本进化福利。阴谋论的恶意揣测一下这难道是 Apple 为了提高 iPhone 销量的手段之一么？</p><p>也看到了在一个大环境是封闭体系的情况下，Apple 在为开放做出的种种努力和变化。 不论是 Swift 的开源， 还是 iOS 10 把系统应用的一些API逐渐提供出来。至少今天，世界变得美好了那么一点点。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站,这样您将能在第一时间获取本站信息.&lt;/p&gt;
    
    </summary>
    
    
      <category term="PM" scheme="http://iiiyu.com/tags/PM/"/>
    
      <category term="产品汪" scheme="http://iiiyu.com/tags/%E4%BA%A7%E5%93%81%E6%B1%AA/"/>
    
      <category term="随便瞎扯" scheme="http://iiiyu.com/tags/%E9%9A%8F%E4%BE%BF%E7%9E%8E%E6%89%AF/"/>
    
  </entry>
  
  <entry>
    <title>鱼子酱的胡思乱想 —— 天下武功唯快不破</title>
    <link href="http://iiiyu.com/2016/02/23/A-product-manager-cranky-Martial-arts-world-but-not-fast-breaking/"/>
    <id>http://iiiyu.com/2016/02/23/A-product-manager-cranky-Martial-arts-world-but-not-fast-breaking/</id>
    <published>2016-02-23T10:36:06.000Z</published>
    <updated>2016-02-25T09:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用快强行解释什么是价值"><a href="#用快强行解释什么是价值" class="headerlink" title="用快强行解释什么是价值"></a>用快强行解释什么是价值</h2><p>我们常常说，要做带给用户有价值的东西。但是到底什么是有价值的东西呢？如果用快来解释的话，大概分两种情况</p><ol><li>之前做不到，但是之后可以做到。</li><li>之前只能很慢的做到，之后能更快的做到。<br>这两种情况都能给用户带来价值。</li></ol><h2 id="用快强行解释传统行业的例子"><a href="#用快强行解释传统行业的例子" class="headerlink" title="用快强行解释传统行业的例子"></a>用快强行解释传统行业的例子</h2><ol><li>为了更快的行动速度：飞机&gt;高铁&gt;汽车&gt;马车&gt;双腿。</li><li>麦当劳肯德基更快的做出食物</li><li>机械化农业更快的完成工作</li><li>机械化工业同上</li></ol><p>他们产生的经济效益也是类似的，越快得到的利润越多。</p><h2 id="用快强行解释移动互联网的例子"><a href="#用快强行解释移动互联网的例子" class="headerlink" title="用快强行解释移动互联网的例子"></a>用快强行解释移动互联网的例子</h2><ol><li>微信是做到了更快的交流（个人认为 Telegram 更快一些）</li><li>Uber做到了更快的叫车服务（滴滴一样）</li><li>ele做到了更快的送餐服务（美团、百度等等外卖一样）</li><li>陌陌做到了更快搭讪陌生人</li><li>支付宝做到了更快的付款（微信跟支付宝差不多， Apple Pay 更快但是层面不是同样的东西）</li><li>众地图应用做到了更快的导航寻路</li><li>微博做到了更快的扩散内容<br>……<br>等等等这个列表可以一直列下去。所有做的好的产品都可以强行用快来解释。</li></ol><h2 id="得到的简单结论-——-天下武功唯快不破"><a href="#得到的简单结论-——-天下武功唯快不破" class="headerlink" title="得到的简单结论 —— 天下武功唯快不破"></a>得到的简单结论 —— 天下武功唯快不破</h2><p>简单的判断一个产品有没用价值，价值的大小。可以跟现有产品进行比较，如果它比现有产品更快达到目的那就是有价值的东西。提高的速度越快，相应的价值也就越大。</p><p>因此在做产品或者是创业中， 就算撞车到了一个相同领域。只要你能保持是同类产品中最快解决问题的。那就是能保持竞争优势。而且这里的快是更加广义的快，你的技术团队比对手跟快的迭代产品，你的公关比对手更快的消除负面影响。你的运营团队能比对手更快的写出高质量的内容。 殊途同归 —— 天下武功唯快不破</p><p>当然只用快来衡量价值是片面的，不严谨的。思考到这里，我突然觉的可以用一些简单的理论和数值来构建一个简单的价值计算公式。不过那就是后面看看我有没有心情把他写出来吧。</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>年前爆出的张小龙的饭否其中有句这样的话“要提防那些blog写得好的产品经理，因为在Blog上花的时间越多，在产品上花的时间就越少。原来还以为有例外，现在看起来无一例外。”</p><p>由此引发出来“要提防那些Blog写得好的程序员，因为在Blog上花的时间越多，在工作上花的时间就越少。原来还以为有例外，现在看起来无一例外。”</p><p>五味杂陈，到底要不要写Blog的。我不知道自己算不算blog写的好。如果不算，那岂不是变成Blog也写的烂，产品 or 技术也烂的人。 如果算，那是不是仅仅是Blog写的好呢。</p><p>我承认，如果我要产出一个我觉得还行的文章，我起码需要四五个小时的时间，一般横跨2-3天的时间。我也知道很多对这个世界有着很多独特的思考的产品大牛和技术大牛。他们忙着做自己想做的事情，并没有时间写Blog。不写Blog并不妨碍他们成为大牛。我也还见过一些天天在SNS上蹦跶，发篇Blog恨不得把所有人都@上，其实水平可能还需要更多时间的打磨的人。</p><p>兜兜转转，我想天下熙熙攘攘，就算是一条咸鱼，我要努力证明我的不同。继续写Blog吧！！！</p><p>PS: 欢迎关注我的微信公众号:</p><p><img src="http://ww3.sinaimg.cn/large/686e6613gw1f1av4hci21j2076076aaj.jpg" alt="qrcode_for_gh_6b76eb7cbc83_258.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用快强行解释什么是价值&quot;&gt;&lt;a href=&quot;#用快强行解释什么是价值&quot; class=&quot;headerlink&quot; title=&quot;用快强行解释什么是价值&quot;&gt;&lt;/a&gt;用快强行解释什么是价值&lt;/h2&gt;&lt;p&gt;我们常常说，要做带给用户有价值的东西。但是到底什么是有价值的东西呢？
      
    
    </summary>
    
    
      <category term="PM" scheme="http://iiiyu.com/tags/PM/"/>
    
      <category term="产品汪" scheme="http://iiiyu.com/tags/%E4%BA%A7%E5%93%81%E6%B1%AA/"/>
    
      <category term="胡思乱想" scheme="http://iiiyu.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记「微信思维」</title>
    <link href="http://iiiyu.com/2016/01/25/Read-Wechat-Thinking-Note/"/>
    <id>http://iiiyu.com/2016/01/25/Read-Wechat-Thinking-Note/</id>
    <published>2016-01-24T23:29:21.000Z</published>
    <updated>2016-01-28T06:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭。本文仅作为个人学习记录使用，也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站，这样您将能在第一时间获取本站信息。</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>先感慨一句，在看不见的地方，有很多人都比我更加努力！</p><h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>厚厚一本，其实读起来还是挺快的。3个小时左右初略的看完一次。整个书是用了一些真实的案例来说明。但微信这个天朝移动互联网最大的平台。在开放现有资源的情况下是怎么建立新的世界次序的。微信真的改变了中国人的生活。</p><p>以下文字重点在看案例以后的感想</p><a id="more"></a><h3 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h3><p>案例：好药师</p><p>感想：看的时候嘘唏不已。在2013年的时候，无意得知云南一心堂在想推进电子商务，过年回家的时候就过去跟某部门负责人谈了谈。心中冒出很多有趣的想法，其中最重要的就是，一心堂已经有售药牌照的情况下，在已有的店铺和仓储物流上。以最后一公里送药上门的切入点，最后变成一个综合性电商。可以自己做或者考虑跟京东置换资源(当时觉得两家都没有上市，虽然jd大，但是一心堂的地区优势明显，而且有药品这种类型是jd缺乏的)。不过鉴于我一直是微小一般的存在。也许根本无法推动这种事情的发生。</p><p>案例：联想</p><p>感想：当联想在我家那种一百八十五线小城市里面都可以开起2、3家专门店的庞然大物（也许是山寨的）。通过微信的平台，转化建立了一个更加现代的销售渠道。</p><h3 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h3><p>案例：唯品会<br>案例：小米</p><p>感想：就算是这两年的当红炸子鸡，也非常重视微信里面的服务接入。也是他们在玩更加大的社群。比起，之前见过那些号称微信营销专业公司来说。他们玩的更正道，更大。</p><h3 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h3><p>案例：泰康</p><p>感想：我妈貌似退休以后，闲不下来，去参加了什么保险业务。没记错的话就是泰康，我是没有耐心教我妈一点一点用微信的。但是她最近一次见我，在说泰康这个好科学，用微信就可以获得什么什么疾病金额。我想能覆盖到那么边疆的地区确实做的很牛逼。当互联网袭卷全行业的时候，保险这一大块必定是巨大的蛋糕。不过也不是随随便便能玩起的。玩不好就是跟那些P2P跑路金融一个样子了。</p><p>案例：汇添富</p><p>感想：微信是个好东西</p><p>案例：智能酒店</p><p>感想：跟北京的冯总在做类似的东西，但是比冯总那种东西要高级多了。另外他们都以为酒店里面可以做社交，怎么想都不可能。除非你是提供生理需求服务。要不谁会去认识住你隔壁昨天传出销魂声音的人。然后也都有一个点，就是说酒店里面的东西可以买回家。无可厚非，但是也只是一个客流量小到忽略不计的山寨宜家而已。反正我觉得不赚钱。</p><p>案例：美丽说</p><p>感想：绕不开的微信</p><h3 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h3><p>案例：武汉交管局</p><p>感想：天朝行政机关如果都这样搞，天朝人民的幸福指数会得到指数级别的增长。但是聪明人都知道这里不好弄，所以我们可预见的时间里面很难看到好事情的发生。</p><p>案例：王府井</p><p>感想：微信改变传统零售行业</p><h3 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h3><p>案例：海底捞</p><p>感想：海底捞无愧良心企业。目前没看到第二家。</p><p>案例：顺丰</p><p>感想：说完就打了自己的脸，顺丰就是第二家。有个事情其实挺好玩的，就是顺丰已开始有推送完整的路由节点过来。后面因为干扰用户太多自己改掉了。这跟张小龙的思维是一模一样的啊，其实我还挺喜欢那个功能的。</p><p>案例：蘑菇街</p><p>感想：有了美丽说，怎么能没有蘑菇街。而且当下这个时间点，美丽说和蘑菇街都合体了。</p><p>案例：深圳供电局</p><p>感想：跟上面交管局一样，其实互联网发展到今天。我们在一些基础功能服务上可以优化的地方太多太多了。稍微努力一点点，就能让我们在天朝的生活指数上升几个台阶</p><h3 id="在微信里面观察到有趣的事情"><a href="#在微信里面观察到有趣的事情" class="headerlink" title="在微信里面观察到有趣的事情"></a>在微信里面观察到有趣的事情</h3><h4 id="平台中诞生了新的平台"><a href="#平台中诞生了新的平台" class="headerlink" title="平台中诞生了新的平台"></a>平台中诞生了新的平台</h4><p>在某一个时刻，我突然观察到一个有趣的现象。老的平台中会出现一个新的完全不一样的平台，然后在某个时刻点会有人跳出来说，新的平台即将替代老的平台。最近的例子就是张小龙说要出现应用号，又有各种分析家再说，iOS，Android等要死。以后一个微信就够了。这里我只关心其中有趣的部分，iOS 等作为移动互联网的基本平台，让所有的 App 能发挥其价值。而当出现了一个类似微信这种体量级别的 App 形成新的平台的时候，居然要代替他们了。如果这一天真的会发生，那 Apple 当初还会提供开放出来整个生态环境吗？那是不是在将来微信这样的平台里面也会诞生一个新的平台并且取代微信呢？ 我觉得这种思路想想就特别有趣。</p><p>当然新旧更替是正常的自然法则，应当抱有一个积极的态度去迎接技术和时代的变革。只是对于我这样一个念旧的人来说，断舍离还是说容易，做到其实很难。</p><h4 id="为用户的利益为第一考虑要素"><a href="#为用户的利益为第一考虑要素" class="headerlink" title="为用户的利益为第一考虑要素"></a>为用户的利益为第一考虑要素</h4><p>其实类似的思想的说法有很多，“用户是上帝”，“用户说的都是对的”，等等。但是95%以上都在说说而已。我都觉得我都不必特别说明，大家都可以举出一大堆的例子出来。</p><p>而在张小龙最近在微信公开课里面演讲中，他明确的表示，希望在微信里面用户用完即走。我保守估计微信在手机上的使用时长绝对能排进中国移动互联网用户99%人里面的前三。但是微信的最高决策者却在思考怎么让用户用完即走。但全世界都在争留存，争打开率，争使用时长的时候。居然龙头老大是在做相反的事情，是以用户利益为导向的事情。</p><p>这时候，我就在想。是先做了以用户利益为导向的事情，才获得了龙头老大的江湖地位。还是以龙头老大的江湖地位，才想到了用户利益为重要。我想，微信在这里是前者。而天朝某些厂家是连后者都不是。他们信奉着以钱为导向，如果出现一些还不错的产品，那是副产品。不能算初心。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这本书告诉我们，用现代的方式提供有价值的产品，是会获得巨大的成功的。而这个现代的方式就是微信这样一个中国移动互联网最大的平台。作为一个产品，我应该去深刻的理解这个事情的价值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭。本文仅作为个人学习记录使用，也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站，这样您将能在第一时间获取本站信息。&lt;/p&gt;
&lt;h2 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h2&gt;&lt;p&gt;先感慨一句，在看不见的地方，有很多人都比我更加努力！&lt;/p&gt;
&lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;厚厚一本，其实读起来还是挺快的。3个小时左右初略的看完一次。整个书是用了一些真实的案例来说明。但微信这个天朝移动互联网最大的平台。在开放现有资源的情况下是怎么建立新的世界次序的。微信真的改变了中国人的生活。&lt;/p&gt;
&lt;p&gt;以下文字重点在看案例以后的感想&lt;/p&gt;
    
    </summary>
    
    
      <category term="read book notes" scheme="http://iiiyu.com/tags/read-book-notes/"/>
    
  </entry>
  
  <entry>
    <title>CoreData VS Realm （2016-02-23更新）</title>
    <link href="http://iiiyu.com/2016/01/19/CoreData-VS-Realm/"/>
    <id>http://iiiyu.com/2016/01/19/CoreData-VS-Realm/</id>
    <published>2016-01-18T21:22:16.000Z</published>
    <updated>2016-05-26T03:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>OhMyStar 2 也进行了一段时日，我把持久化的方式从CoreData 换到了 Realm。有些感悟，顺手就记录一下吧。以下评论都是自己很主观的感受，无实际测试数据支持。</p><h2 id="论-iOS-的持久化"><a href="#论-iOS-的持久化" class="headerlink" title="论 iOS 的持久化"></a>论 iOS 的持久化</h2><p>iOS 持久化其实也没多少选择， 高端一点CoreData、Realm、FMDB、KV类(LevelDB等)。低端一些直接一个 NSArray 就写成 Plist 也能持久化下来。</p><p>在网络环境越来越快的当下和大部分应用数据都可能是网络应用，如果业务逻辑并不复杂，其实极端一点就只用写到 JSON 转 Object 就好了。而且一堆这样好用的封装，远有<a href="https://github.com/Mantle/Mantle" target="_blank" rel="noopener">Mantle</a> 近有<a href="https://github.com/ibireme/YYModel" target="_blank" rel="noopener">YYModel</a>。</p><p>所以需要持久化的时候，我觉的可以慎重的评估一下需求。想明白了，后面可以节省很多事情。</p><p>本文章主要对比 Realm 和 CoreData，其他的就不涉及了。</p><a id="more"></a><h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h4 id="入门门槛低"><a href="#入门门槛低" class="headerlink" title="入门门槛低"></a>入门门槛低</h4><p><a href="https://realm.io/docs/swift/latest/" target="_blank" rel="noopener">Realm文档</a>就算一个字一个字扣着读完，一个下午就足够了。而且还有中文版本，不要太友好哦，有点不习惯诶。</p><p>文档覆盖了80%的使用情况，甚至有些太简陋的嫌疑。但不管怎么样，这种入门条件比起 CoreData 写了三个月都没搞清楚 Context 要好的多。</p><p>在库的工具链上，安装一个 Realm Browser 以后就不需要其他辅助了。还是简单。</p><p>几乎做到了上手即用的程度。五星好评。</p><p>PS：我用了一个通宵把 OhMyStar 2 的持久化从 CoreData 换到了 Realm ，优化调整了大概5天左右达到勉强可以用的情况 。在这之前并没有任何 Realm 的经验。</p><h4 id="据说性能好一些"><a href="#据说性能好一些" class="headerlink" title="据说性能好一些"></a>据说性能好一些</h4><p><a href="https://realm.io/news/introducing-realm/" target="_blank" rel="noopener">Realm官方介绍Fast一段中</a></p><p>Counts<br><img src="https://realm.io/assets/benchmarks/benchmarks.002b.png" alt="Counts"></p><p>Queries<br><img src="https://realm.io/assets/benchmarks/benchmarks.003b.png" alt="Queries"></p><p>Inserts<br><img src="https://realm.io/assets/benchmarks/benchmarks.001b.png" alt="Inserts"></p><p>在写这里的时候我顺手Google了一下 发现一篇<a href="http://suree.org/2015/09/29/DatabaseThink/" target="_blank" rel="noopener">Core Data, FMDB, Realm 性能测试</a>。我就多说几句</p><p>总觉得大家对 CoreData 误会蛮深，代码 Fork 看了一下， 总觉得不应该这样写来比性能的，但是一时半会也不知道怎么改。我只能说我在优化 CoreData 的时候根据 WWDC 上教的还是提升很高，另外一个事情是 CoreData 一般都用 Sqlite 做后端。所以如果你的查询是经过优化的，确认打出来的SQL语句科学以后，Sqlite(CoreData) 跟 Sqlite(FMDB)我觉得性能就算有差距，这差距没有能大到选择方案的决定性因素。如果使用 CoreData 遇到性能瓶颈，你应该仔细的研究 WWDC 和几篇很好的文章。确保你的 CoreData 使用方式是正确科学的。</p><h4 id="没有需要架构Context那种烦人的东西"><a href="#没有需要架构Context那种烦人的东西" class="headerlink" title="没有需要架构Context那种烦人的东西"></a>没有需要架构Context那种烦人的东西</h4><p>应该也算Realm简单的一个方面，Realm 只要保持自己线程里面，自己的 Realm Store 操作是正确的即可。如果是 CoreData，怎么架构一个科学的 Context Stack 就足够让我头疼一整，iOS 还好，界面是一个接着一个(VC跟VC之间的层级关系很清晰)。而 OhMyStar 2 这种 OS X 桌面应用场景VC之间很复杂，线程之间Context的关系让出现很多问题。</p><h4 id="支持-NSPredicate"><a href="#支持-NSPredicate" class="headerlink" title="支持 NSPredicate"></a>支持 NSPredicate</h4><p>从 CoreData 转过来并没有太多的不适应</p><h4 id="很简单的使用多个存储文件"><a href="#很简单的使用多个存储文件" class="headerlink" title="很简单的使用多个存储文件"></a>很简单的使用多个存储文件</h4><p>举个例子，多用户登陆情况下。用户是单独的存储文件，和全部用户使用同一个存储文件。后者需要每条用户数据都要关联一次当前用户，所有查询用户数据的时候，你都必须加上当前用户的查询项。而使用每个用户单独一个数据文件的时候，整个存储结构会清爽很多。</p><h4 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h4><p>至少实在没法的时候还可以去微博上吐槽他们，他们其实也有极大的热情来解决你遇到的问题。CoreData 这种遇到问题就只能自己默默的吞下。</p><h4 id="细粒化通知-更新-0-98-x-版本以后可以获得精细化通知"><a href="#细粒化通知-更新-0-98-x-版本以后可以获得精细化通知" class="headerlink" title="细粒化通知 (更新 0.98.x 版本以后可以获得精细化通知)"></a>细粒化通知 (更新 0.98.x 版本以后可以获得精细化通知)</h4><p>看最新的文档已经更新：</p><p><a href="https://realm.io/docs/swift/latest/#notifications" target="_blank" rel="noopener">Notifications</a></p><p>有了这个通知我思考的结构里，写入数据的所有线程都可以在后台了，而且更新UI的时候只用在需要的地方监听需要的类。这个进步</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><h4 id="关联关系弱的一逼"><a href="#关联关系弱的一逼" class="headerlink" title="关联关系弱的一逼"></a>关联关系弱的一逼</h4><p>简单说来就是对象跟对象之间的一对多关系和多对多关系。并不能映射，需要在双方里面都写上属性，此外还需要在设置的时候两边同时设置。查询时候也是 NSPredicate 也仅仅只支持一些一层的查询，没法做出带SUBQUERY的复杂查询出来。</p><h4 id="强制内省容错机制导致存储文件不断变大"><a href="#强制内省容错机制导致存储文件不断变大" class="headerlink" title="强制内省容错机制导致存储文件不断变大"></a>强制内省容错机制导致存储文件不断变大</h4><p>Realm本身感觉有一个数据容错机制。但是这个机制在数据库文件有错误的情况自己修复的时候，会无限增大。具体我这里表现为，打开看只有3000条数据，但是文件大小已经有3GB。重现Bug也很容易，只要你在写数据库的时候,用Realm Browser查看一下，crash之后在打开就很容易出现。</p><p>官方文档里面有说到会造成这种情形的原因，我在尽我所能的避免问题以后。存储文件还是会有可能不那么夸张的变大一些。但是用Realm Browser查看数据是正常的。所以我觉得官方应该提供一个函数，可以删除掉那些容易的东西。保持存储文件的干净。</p><h4 id="没有细粒化通知"><a href="#没有细粒化通知" class="headerlink" title="没有细粒化通知"></a>没有细粒化通知</h4><p>～～也就是说，当我在某个地方做出修改。 我其他地方只知道Realm有修改，但是没法知道我是增加、修改还是删除了数据。不知道我更新的是那一条数据。据文档说，将来会解决这个问题，就只有拭目以待。～～</p><h4 id="增加包体积"><a href="#增加包体积" class="headerlink" title="增加包体积"></a>增加包体积</h4><p>据官方说会增加1MB左右的包大小，如果你是一个小体积应用，或者是一个几千万用户的主流应用。对包大小敏感的话慎用。</p><h4 id="核心代码目前闭源"><a href="#核心代码目前闭源" class="headerlink" title="核心代码目前闭源"></a>核心代码目前闭源</h4><p>对于在我们这样一个作恶满天飞的天朝长大的孩子来说，有些孩子对闭源这个事情还是挺在意的。不过官方说将来会开源，我还是倾向于相信 Realm 他们的人品。</p><h2 id="CoreData"><a href="#CoreData" class="headerlink" title="CoreData"></a>CoreData</h2><p>CoreData 相关资料相对多一些我就简单说</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><h4 id="官方支持-amp-amp-亲儿子"><a href="#官方支持-amp-amp-亲儿子" class="headerlink" title="官方支持 &amp;&amp; 亲儿子"></a>官方支持 &amp;&amp; 亲儿子</h4><p>系统自带，Apple支持</p><h4 id="带图形化的Model编辑"><a href="#带图形化的Model编辑" class="headerlink" title="带图形化的Model编辑"></a>带图形化的Model编辑</h4><p>对于视觉化动物来说比较友好，也可以清楚的知道自己设计的 Model 之间的关系</p><h4 id="强大的关联关系"><a href="#强大的关联关系" class="headerlink" title="强大的关联关系"></a>强大的关联关系</h4><p>以前不觉得，用了 Realm 才发现 CoreData 的关联关系如此好用，一对多，多对多。想怎么查询就怎么查询，可以写出很复杂的查询逻辑来。</p><h4 id="强大的查询"><a href="#强大的查询" class="headerlink" title="强大的查询"></a>强大的查询</h4><p>虽然可能在设置NSFetchRequest的时候感觉很多东西要弄，但是复杂也带来了强大的功能，NSFetchRequest 可以设置很多，比如限制查询数量， 限制只返回某些属性值等等。就不展开说了。</p><h4 id="精细化的通知"><a href="#精细化的通知" class="headerlink" title="精细化的通知"></a>精细化的通知</h4><p>可以知道具体插入了什么、更新了什么、删除了什么。这样在刷UI，比如一个tableview的时候，你就可以控制的很准确。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><h4 id="入门门槛高"><a href="#入门门槛高" class="headerlink" title="入门门槛高"></a>入门门槛高</h4><p>CoreData 是一个博大精深的技术，不要妄想几天之内可以用的很溜。<br>CoreData 是一个博大精深的技术，不要妄想几天之内可以用的很溜。<br>CoreData 是一个博大精深的技术，不要妄想几天之内可以用的很溜。</p><p>如果没有足够的时间和精力去接入 CoreData。 那选型的时候应当慎重考虑。</p><h4 id="需要一些工具才感觉好使"><a href="#需要一些工具才感觉好使" class="headerlink" title="需要一些工具才感觉好使"></a>需要一些工具才感觉好使</h4><p>不管是老手还是新手，使用一些第三方的封装库和工具都会大大的提高使用 CoreData 的幸福指数。</p><p>mogenerator 是必须必须要的。</p><p><a href="https://github.com/magicalpanda/MagicalRecord" target="_blank" rel="noopener">MagicalRecord</a> 无愧 CoreData 第一库，据小道消息 主要贡献者 Saul Mora 可能去了微信了。</p><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>其实还是 CoreData 门槛高的问题，对我来说。Context之间的关系和线程之间的处理让我感到很头痛，特别是 OS X  是一大堆VC铺到屏幕上，我水平又菜，出的问题很多。</p><h4 id="多个持久化文件很麻烦"><a href="#多个持久化文件很麻烦" class="headerlink" title="多个持久化文件很麻烦"></a>多个持久化文件很麻烦</h4><p>不是说不可以，但是真的好麻烦。</p><p>有个第三方库有解决CoreData这个问题 <a href="https://github.com/JohnEstropia/CoreStore" target="_blank" rel="noopener">CoreStore</a> 但是我用着不是很顺手最后弃用.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实吧用啥持久化都行，具体还是需要看你的需求和方案上来说哪一个方案更加适合。</p><p>如果简单说来，就是 Realm 更加适合一些业务逻辑不怎么复杂的场景，团队配置要求不高，有经验的人稍微看一下午就能上手。</p><p>CoreData 更加适合业务逻辑复杂的情况，团队配置要求比较高，有经验的老手也需要几周甚至更长的时间才能科学的使用CoreData。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站,这样您将能在第一时间获取本站信息.&lt;/p&gt;
&lt;h2 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h2&gt;&lt;p&gt;OhMyStar 2 也进行了一段时日，我把持久化的方式从CoreData 换到了 Realm。有些感悟，顺手就记录一下吧。以下评论都是自己很主观的感受，无实际测试数据支持。&lt;/p&gt;
&lt;h2 id=&quot;论-iOS-的持久化&quot;&gt;&lt;a href=&quot;#论-iOS-的持久化&quot; class=&quot;headerlink&quot; title=&quot;论 iOS 的持久化&quot;&gt;&lt;/a&gt;论 iOS 的持久化&lt;/h2&gt;&lt;p&gt;iOS 持久化其实也没多少选择， 高端一点CoreData、Realm、FMDB、KV类(LevelDB等)。低端一些直接一个 NSArray 就写成 Plist 也能持久化下来。&lt;/p&gt;
&lt;p&gt;在网络环境越来越快的当下和大部分应用数据都可能是网络应用，如果业务逻辑并不复杂，其实极端一点就只用写到 JSON 转 Object 就好了。而且一堆这样好用的封装，远有&lt;a href=&quot;https://github.com/Mantle/Mantle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mantle&lt;/a&gt; 近有&lt;a href=&quot;https://github.com/ibireme/YYModel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YYModel&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;所以需要持久化的时候，我觉的可以慎重的评估一下需求。想明白了，后面可以节省很多事情。&lt;/p&gt;
&lt;p&gt;本文章主要对比 Realm 和 CoreData，其他的就不涉及了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://iiiyu.com/tags/iOS/"/>
    
      <category term="Mac" scheme="http://iiiyu.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>2016年移动互联网职业入门规划指南</title>
    <link href="http://iiiyu.com/2016/01/12/2016-IT-professionals-Getting-Started/"/>
    <id>http://iiiyu.com/2016/01/12/2016-IT-professionals-Getting-Started/</id>
    <published>2016-01-11T18:33:32.000Z</published>
    <updated>2016-01-21T03:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用，也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站，这样您将能在第一时间获取本站信息。</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>2016年才开始，再次感慨时光如逝。2015一年面基了好多人，其中认识了好多小朋友。有的小朋友真的很厉害，而有的小朋友也有我在当时年纪的迷茫。觉得在28岁这样“长者”的年纪，自己也算做一个有故事的男同学。写下这一篇文章，也算写给18岁的自己。至少证明我来过这个世界。</p><p>在2012年，我以当时的能看见的未来写过一篇<a href="http://iiiyu.com/2012/02/09/junior-it-people-c-study-guide/">IT人士入门指南</a>。</p><p>几年后的今天来看，有一些内容和想法是过时的、片面的、不完善的。所以一直想去更新一下。无奈觉得自己好像也没做出什么能拿出手的成绩，觉得写出来会不会误人子弟。</p><p>但是后面我发现，我的某些想法虽然在很多人里面看起来很“傻逼”。但是如果能分享给更多的人可能会让这个世界变得美好这么一点点。加上自己近一年时间的伪创业＋伪独立开发，思考问题的方式可能带来一些不一样的见解。这还是值得去做的一件事情。分享是种美德。</p><p>本文目标读者：在12岁～22岁喜欢互联网或者想从事互联网工作的小朋友们。</p><h2 id="做人"><a href="#做人" class="headerlink" title="做人"></a>做人</h2><p>首先谈谈人的本身。做事先做人，一个老生长谈的问题。接下来的讨论情况基于更加普遍的情况(特殊情况不再讨论范围)。</p><p>根据我的观察，一个能在IT行业做到顶尖的人，如果换一个行业或者职业，加以时间很大程度上也能做到新行业的顶尖。因为他们身上都有一些共同的特质——专注、勤奋、渴望。也就是那句著名的“Stay hungry. Stay foolish.”</p><p>为什么名校的人们更容易做到顶尖？我认为跟他们读不读名校其实关系不大，而在于他们考进名校的时候就已经让自己成为了那种做事能 专注、勤奋、渴望的人。而12-18岁这样的年纪大家做的事情也只有一个就是去高考，所以他们把这个事情能做好进入了名校。自然以后不管从事什么职业和行当，他们只要继续的专注、勤奋、渴望，都不得不成为行业的精英。多说一句在当下这样学识、教育获取更加扁平的情况下(世界顶级大学都有公开课)，国内大学教育在我看来并重要。所以在人生的不断旅程中，如果想要成为行业的Top级别，需要自己先问问自己是否能保持周围学霸的那种专注、勤奋和渴望。</p><p>专注、勤奋是都能找到具体的实践办法。而渴望就是内心深处的一种感觉，要有这种感觉最简单的就是喜欢。所以才说要从事自己喜欢的职业。</p><p>这部分适合各种情况，所以也不展开说了。以免写多了像鸡汤。</p><a id="more"></a><h2 id="大学专业"><a href="#大学专业" class="headerlink" title="大学专业"></a>大学专业</h2><p>我前面已经说过，在当下这个时间点(2016年)。在国内的大学99%都是骗钱的，高校是以企业化的方式来运转。尤其以贵国示范性软件学院为首。当然也不是说去上大学就是一无是处，上大学是你第一次扩张你人脉的关键时间点。你读越是好的国内院校，你周围的人也会越优秀。物以类聚，人以群分。周围优秀的人越多，你被优秀化的概率也越高。</p><p>关于学校选择我认为的指标</p><ol start="0"><li>海外名校&gt;985&gt;211&gt;其他</li><li>沿海的&gt;内陆的</li><li>发达地区的&gt;落后地区的</li><li>每年学费少的&gt;每年学费贵的</li><li>好逃课的&gt;严格的考勤的(这个纯属我的主观感受，因为做事的动力应该是源于你的内心的认同感，而不是一些外部的力量)</li></ol><p>在这个信息被平铺的时代，你将来从事的职业跟你读的专业可以一毛钱关系都没有。而你的职业生涯出不出彩，在于你在这个方向投入了多少时间。能达到一个什么样的程度。工作这么几年，我见过读数学的，读经管的，读英语的，读医科的，都变成了优秀的IT从业人员。所以如果有论调说你不是科班出身的，什么什么没有基础。那我觉得只是你投入的不够专注，和渴望做成这个事情。</p><p>互联网时代或者说移动互联网时代，那些大佬天天说的拼的是人才。我想也就是这样拥有专注、勤奋、渴望的人吧。</p><h2 id="作为一个当下时代的人必备技能"><a href="#作为一个当下时代的人必备技能" class="headerlink" title="作为一个当下时代的人必备技能"></a>作为一个当下时代的人必备技能</h2><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>说来惭愧，我的英语并不好。差到难于想象的地步，差到了令人发指的地步。但是我却见了太多太多对英文不屑一顾的做技术的小朋友。当他们问出问题的时候，我甚至会吧 stackoverflow 的答案丢给他。结果换来的是一句看不懂。这时候我只是心里默默的说了“滚你麻痹，不要做IT了吧”。</p><p>英语的重要性是最最最重要的。 套用别人的一句话来说“是投入最少，产出最多的投资”。</p><h3 id="能自由的访问全球互联网"><a href="#能自由的访问全球互联网" class="headerlink" title="能自由的访问全球互联网"></a>能自由的访问全球互联网</h3><p>在贵国这样恶劣的生存环境下，至少至少一年100元的付费投入是觉得必须的。不要每天折腾那些免费的方案，时间比钱重要的多。</p><h3 id="使用而且只使用-Google"><a href="#使用而且只使用-Google" class="headerlink" title="使用而且只使用 Google"></a>使用而且只使用 Google</h3><p>在你是真正的互联网以后，请把你浏览器的搜索引擎设置为 Google。养成只使用 Google 的情况。<br>如果你连Google都不会用，那可以在<a href="http://iiiyu.com/2012/02/09/junior-it-people-c-study-guide/">IT人士入门指南</a>中找到一些如何使用 Google 的方法。</p><h3 id="学会如何提问"><a href="#学会如何提问" class="headerlink" title="学会如何提问"></a>学会如何提问</h3><p><a href="http://doc.zengrong.net/smart-questions/cn.html" target="_blank" rel="noopener">提问的智慧</a></p><h3 id="终身的学习和独立思考"><a href="#终身的学习和独立思考" class="headerlink" title="终身的学习和独立思考"></a>终身的学习和独立思考</h3><h4 id="学会提高自己的智慧去独立思考"><a href="#学会提高自己的智慧去独立思考" class="headerlink" title="学会提高自己的智慧去独立思考"></a>学会提高自己的智慧去独立思考</h4><p>还是当下这样信息成灾难的时代，每天接受的信息实在太多太多了。如果缺乏足够的智慧去独立思考，那将是一个巨大的悲剧。就真的变成了人云亦云的傻逼。当新的一波浪潮过来，就是被冲到沙滩的牺牲体。</p><h4 id="学会接受意见相左理性观点"><a href="#学会接受意见相左理性观点" class="headerlink" title="学会接受意见相左理性观点"></a>学会接受意见相左理性观点</h4><p>无脑喷的除外。如果是有人提出了相左理性观点，要学会理解上下文。这样会为自己的观点完善和提高自己的思辨能力。</p><h4 id="学会接受新的事物"><a href="#学会接受新的事物" class="headerlink" title="学会接受新的事物"></a>学会接受新的事物</h4><p>不要用惯用的思维去理解和接受新的事物，这样容易带有偏见。</p><h4 id="盗版"><a href="#盗版" class="headerlink" title="盗版"></a>盗版</h4><p>用盗版是臭傻比这个事情，无数人说了无数。我就只说一点就算万不得已了，使用了盗版的人。你要明白这个是一种偷窃的行为，你应该为此感到羞愧。你要产生一种我将来有钱了的时候一定要换成正版的想法。而不是到处的宣传盗版的分发处和一股我就用盗版我光荣的姿态。</p><p>因为这几乎是一个人最基本的诚信问题啊。</p><h4 id="中医"><a href="#中医" class="headerlink" title="中医"></a>中医</h4><p>为了你的生命健康，请远离中医。</p><p>PS: 更新一下，好多人说我无脑喷。我就贴一个视频吧。 多的不说了</p><p><a href="http://v.youku.com/v_show/id_XOTQwMTQ2NTcy.html" target="_blank" rel="noopener">你怎么还信中医</a></p><h2 id="移动互联网职业规划"><a href="#移动互联网职业规划" class="headerlink" title="移动互联网职业规划"></a>移动互联网职业规划</h2><p>当下的世界是一个快速发展的世界，由于科技的进步世界中在不断的加速中。这就导致一个什么问题，就是如果说大学教育是为了获得就业能力的话，大学里面的课程和专业分类已经远远落后于这个时代。所以我觉得现在你读的专业和毕业以后想要找工作其实可以没有任何关系。</p><p>下面的职业都没有什么高低之分，他们对于一个公司来说在不同方面上给予价值的体现。任何职业的顶尖人才对于公司来说都是可遇不可求的。当然工资是一个市场作用和多方面因素的结果，我的建议是不用寻着当下看上去最高的工资，而应该去找最适合自己的职业。因为长远一些来看，你做到高级程度的收益要远远大于初级程度的收益。如果选择了一个不适合的，你很难从内心产生源动力去把自己的水平推向高级甚至顶级。</p><p>我把这几年看到的职位大概简单说明一下：</p><h3 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h3><p>一般来说计算机科学学院和软件学院对应出口的都是做技术路线。也就是俗称的程序员。但是我见过的课程里面，都是想要把学生教育成为一个服务端程序员。其他的方向从课程体系到老师态度都是脱离时代的。</p><p>其中一些基本工参考<a href="http://iiiyu.com/2012/02/09/junior-it-people-c-study-guide/">IT人士入门指南</a><br>而且往往都是你深入了解某个方向，但是其他方向也是需要有基本的常识。因为总的来说计算机技术的出现都是为了解决问题的，他们之间并不是孤立的。大道至简、重剑无锋。了解更多的知识有助于你向高级进阶。</p><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>简单来说写程序的逻辑和数据处理。主流使用语言及其框架有且不限制于</p><ul><li>PHP: Laravel</li><li>Python: Django</li><li>Ruby: Rails</li><li>NodeJS: Express.js</li><li>Java: 貌似自己写</li><li>Go: 貌似也是自己写</li><li>Erlang: 应该也是自己写</li><li>C++: 还是自己写</li></ul><p>简单说服务端的挑战是随着公司业务增长的时候出现的需求:</p><ol><li>高稳定性</li><li>高安全性</li><li>高扩展性</li><li>高并发性</li><li>高自动化</li><li>快速迭代</li></ol><p>语言和框架都是解决问题的工具，当遇到问题的时候。肯定是拿起你认为最顺手、最合适的工具来解决眼前的问题。所以在此再次说明：技术是不应该带有偏见的。如果有，请拿出代码打我的脸。</p><p>如果你对写出更快、更强、更高效的代码感到兴奋和心情愉悦的话。服务端的方向可能是你好的选择。</p><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>目前来说前端可以包含了Web前端和手机前端。没错，iOS 和 Android 其实也能算前端。</p><p>Web前端博大精深:刚刚入门的你应该从 HTML5 和 CSS3 开始学起。 然后就是进阶到 JavaScript 的欢乐海洋里面。</p><p>iOS：Swift 的入门比 Objective－C 要高的多</p><p>Android：其实 Material Design 也挺好看不是</p><p>如果你对做出来的东西想要酷炫的动画和交互感兴趣，前端不妨考虑一下。</p><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p>当电子科技无孔不入的时候，安全成为首要重要的事情。我认为未来肯定会有专门做安全的独角兽出现。而不是不要底线的流氓公司。</p><p>当然，如果你对当下的权威表示不满，你也可以黑了他们。安全历来都是矛与盾的相争。都是黑帽子和白帽子的江湖。</p><p>如果你对数学的有孜孜不倦的好奇之心，安全领域一定会满足你。</p><p>当你横空出世、崭露头角。巨头们都必须得花重金抢你。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>在存技术领域里面，还有一些可能比较边缘的职位，可能是需要足够大的公司才能专门独立出来。</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>白盒黑盒，能抓住Bug的都是好盒子。</p><h5 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h5><p>运维掌握着整个公司的服务器资源，公司的所有程序都得跑在运维搭建好的环境里面。公司网站挂了，服务挂了。可能第一个背锅的人。</p><h3 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h3><p>最重要的事情说三遍：</p><p>并不是人人都能成为合格的产品经理！产品经理的入门门槛很高！<br>并不是人人都能成为合格的产品经理！产品经理的入门门槛很高！<br>并不是人人都能成为合格的产品经理！产品经理的入门门槛很高！</p><p>路漫漫其修远兮，吾将上下而求索。</p><p>我也说不好，毕竟才刚刚入门而已。</p><p>产品经理大到整个世界的发展趋势，小到一次屏幕上的点击都需要去思考。把用户需求放到首位确实不能只嘴上说说，而是需要用心去想，在想想，然后才做到产品里面去的。</p><p>所以，什么样的产品是以钱为第一位，什么样的产品是以用户为第一位的，其实一眼就能看出来。</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>设计的地位在进几年不断的提升。一个好的设计是产品的一个强有力的质量保证。</p><p>当然在互联网公司，设计师的工作主要是Web网页设计，各种宣传图设计，App UI设计，各种动画效果设计，有能力者还可能是各种视频的制作者。</p><p>如果你对美好的事物天生的喜爱，而且强迫的追求各种对称和归纳，再有绘画的功底。那你天生就是干设计的命啊。</p><h3 id="运营"><a href="#运营" class="headerlink" title="运营"></a>运营</h3><p>你天生逗比么？你天生段子手么？你天生比其他人能写么？你天生就能找到好玩有趣的内容么？</p><p>你天生的话痨么？你喜欢跟其他人叨逼叨么？你喜欢多管闲事么？</p><p>如果你有上列描述的情况，恭喜你，你有成为一个天才运营的潜力。</p><h3 id="市场渠道"><a href="#市场渠道" class="headerlink" title="市场渠道"></a>市场渠道</h3><p>在国内估计就是那些七七八八的渠道你要明白，你手里拿着钱要能去买量来进行推广。</p><p>曾经的SEO，现在的ASO等</p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>其实吧，做游戏才是真的赚钱，你看各大电视台的广告都换成手游了不是，他们大概又有一下职位：</p><ol><li>游戏客户端</li><li>游戏服务器端</li><li>游戏策划</li></ol><p>希望你就在下一个月流水过亿的团队里吗，年终的时候发宝马哦。</p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>还有最佳火热的 GrowthHacker 啊等等，由于我都没有足够深入的经验也就按下不表，随便提一下吧。</p><h2 id="创业"><a href="#创业" class="headerlink" title="创业"></a>创业</h2><p>如果你选择进行小团队创业或者做一个独立开发者，恭喜你。以上提到的技能，你都会点一遍。</p><h2 id="人生"><a href="#人生" class="headerlink" title="人生"></a>人生</h2><p>归根结底，还是你自己决定要成为一个什么样的人。就前几天有个朋友跟我喝酒喝多了说了一句：“你啊，就是太清高。所以才赚不到钱。” 我无言以对，因为我也会有对金钱的渴望，却又要想着站着堂堂正正，对我来说太难太难了。回望过去，只能说我不忘初心。所以到目前为止，人生最重要的是过的痛快，心里想啥就好好的干啥，跟着自己的心走。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从99.99999%的角度上来说，我说说的都是错的。 只剩下内心一点点的自己在肯定而已。</p><p>其实我也只是泛泛的谈了谈，具体每个职业需要做到高级都需要一万小时去积累。</p><p>又是一篇拖了20天才断断续续写完的文章，质量上自己都不是很满意。</p><p>希望能帮助到即将进入互联网行业的你。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用，也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站，这样您将能在第一时间获取本站信息。&lt;/p&gt;
&lt;h2 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h2&gt;&lt;p&gt;2016年才开始，再次感慨时光如逝。2015一年面基了好多人，其中认识了好多小朋友。有的小朋友真的很厉害，而有的小朋友也有我在当时年纪的迷茫。觉得在28岁这样“长者”的年纪，自己也算做一个有故事的男同学。写下这一篇文章，也算写给18岁的自己。至少证明我来过这个世界。&lt;/p&gt;
&lt;p&gt;在2012年，我以当时的能看见的未来写过一篇&lt;a href=&quot;http://iiiyu.com/2012/02/09/junior-it-people-c-study-guide/&quot;&gt;IT人士入门指南&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;几年后的今天来看，有一些内容和想法是过时的、片面的、不完善的。所以一直想去更新一下。无奈觉得自己好像也没做出什么能拿出手的成绩，觉得写出来会不会误人子弟。&lt;/p&gt;
&lt;p&gt;但是后面我发现，我的某些想法虽然在很多人里面看起来很“傻逼”。但是如果能分享给更多的人可能会让这个世界变得美好这么一点点。加上自己近一年时间的伪创业＋伪独立开发，思考问题的方式可能带来一些不一样的见解。这还是值得去做的一件事情。分享是种美德。&lt;/p&gt;
&lt;p&gt;本文目标读者：在12岁～22岁喜欢互联网或者想从事互联网工作的小朋友们。&lt;/p&gt;
&lt;h2 id=&quot;做人&quot;&gt;&lt;a href=&quot;#做人&quot; class=&quot;headerlink&quot; title=&quot;做人&quot;&gt;&lt;/a&gt;做人&lt;/h2&gt;&lt;p&gt;首先谈谈人的本身。做事先做人，一个老生长谈的问题。接下来的讨论情况基于更加普遍的情况(特殊情况不再讨论范围)。&lt;/p&gt;
&lt;p&gt;根据我的观察，一个能在IT行业做到顶尖的人，如果换一个行业或者职业，加以时间很大程度上也能做到新行业的顶尖。因为他们身上都有一些共同的特质——专注、勤奋、渴望。也就是那句著名的“Stay hungry. Stay foolish.”&lt;/p&gt;
&lt;p&gt;为什么名校的人们更容易做到顶尖？我认为跟他们读不读名校其实关系不大，而在于他们考进名校的时候就已经让自己成为了那种做事能 专注、勤奋、渴望的人。而12-18岁这样的年纪大家做的事情也只有一个就是去高考，所以他们把这个事情能做好进入了名校。自然以后不管从事什么职业和行当，他们只要继续的专注、勤奋、渴望，都不得不成为行业的精英。多说一句在当下这样学识、教育获取更加扁平的情况下(世界顶级大学都有公开课)，国内大学教育在我看来并重要。所以在人生的不断旅程中，如果想要成为行业的Top级别，需要自己先问问自己是否能保持周围学霸的那种专注、勤奋和渴望。&lt;/p&gt;
&lt;p&gt;专注、勤奋是都能找到具体的实践办法。而渴望就是内心深处的一种感觉，要有这种感觉最简单的就是喜欢。所以才说要从事自己喜欢的职业。&lt;/p&gt;
&lt;p&gt;这部分适合各种情况，所以也不展开说了。以免写多了像鸡汤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随便瞎扯" scheme="http://iiiyu.com/tags/%E9%9A%8F%E4%BE%BF%E7%9E%8E%E6%89%AF/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 「引爆点」</title>
    <link href="http://iiiyu.com/2015/01/31/read-the-tipping-point/"/>
    <id>http://iiiyu.com/2015/01/31/read-the-tipping-point/</id>
    <published>2015-01-31T10:08:19.000Z</published>
    <updated>2015-02-05T02:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用，也欢迎在<a href="http://creativecommons%E3%80%82org/licenses/by-nc/4%E3%80%820/deed%E3%80%82zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用<a href="http://iiiyu%E3%80%82com/atom%E3%80%82xml" target="_blank" rel="noopener">RSS</a>方式订阅本站，这样您将能在第一时间获取本站信息。</p><h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><p>嗯，在一月的最后一天的最后一个小时开始写这篇读书笔记。也就算做这个月输出了3篇 blog。如果对比2014年这种令人发指的输出量来说。对于自己不得不说是一个巨大的进步。</p><p>这本「引爆点」是在去上海开年会的来回路程上扫完的。顺便说一句，Sumi 除了Kevin Cao。其它全部在上海喝了残血回程的。 我还内伤了回来在医院躺了2天。 这是后话了。可见战斗力下降的厉害。</p><p>最近我看书，一边看、一边会去联系一堆事物进行思考。因此现在的读书笔记也是想到什么写什么。并不是上学时候那种读书笔记顺序条例整齐的。算做观后随笔之类的吧。</p><p>最后的一句扯淡，我不应该怎么晚才看到这本书。</p><a id="more"></a><h2 id="关于本书"><a href="#关于本书" class="headerlink" title="关于本书"></a>关于本书</h2><p>由于我断网了，所以我无法查询到「引爆点」的成书时间。不过根据书里面的各种信息透露。我推断「引爆点」成书应该在2000年之前，1996年以后。说这个的原因是说，现在的和过去不久的一些流行过的概念。应该都出自此书。比如影响里面最深刻的破窗效应。比如罗永浩说过的搞定最前面的一拨人就能引发流行的理论。（插一句2014年的老罗单口相声还没看呢）</p><p>所以，很多人应该很早前就看过本书。并且从书里面学到了很多智慧来运用在日常的生活当中。而且就拿出里面的片段出来都可以变成单独的流行文章。所以，我不应该怎么晚才看到这本书。暴露出自己最近10年来的阅读量远远小于自己设定的的阅读量。</p><p>如果还没有看过「引爆点」，强烈推荐。</p><h2 id="依旧是在研究人啊"><a href="#依旧是在研究人啊" class="headerlink" title="依旧是在研究人啊"></a>依旧是在研究人啊</h2><p>前两天才说过，貌似除了自然学科。其他的都是在研究人。对人和人性的探究，从 DNA 到思想。</p><p>我觉得「引爆点」的作者马尔科姆·格拉德威尔应该是试图从科学的角度系统的说明为何一个东西会在某个标准性的时间或者事件以后成为流行的原因。</p><p>马尔科姆·格拉德威尔选择的所有例子都是围绕着社会问题来进行选择的。美国独立战争的开端、普通大众流行的鞋子、及其成功学前儿童所看的电视节目、吸烟吸毒、整顿地铁降低犯罪率、小岛上的自杀等等。方向并不单一。而且我经常在国外的书里面看到，在大学里面进行的志愿者实验来佐证自己的观点。我从来没有听说过我的大学有进行过类似为了科学研究一个事情用这样的随机普通样本进行的试验。仅从这点上来看，天朝的大学离现代正在的大学差距不是一星半点。当然可能我读的大学和能接触到的大学都比较low。有以偏概全的嫌疑。不过我还是坚持这种天朝所有大学离真正的科学、民主、自由的现代大学有十万八千里的距离的观点。</p><p>继续扯远一些，其实现代文明社会和天朝都有在研究人。但是给我的感觉是孑然不同的。我的感觉现代文明社会研究人，把每个人都当作一个独立的个体来研究。不管怎么样，是伟大、普通平凡、还是十恶不赦。在当作科学来研究的时候。都是平等的。但是天朝不是，天朝是啥。就自己感受吧。</p><h2 id="「引爆点」和-「厚黑学」"><a href="#「引爆点」和-「厚黑学」" class="headerlink" title="「引爆点」和 「厚黑学」"></a>「引爆点」和 「厚黑学」</h2><p>两个毫不相关的书，在我心里却有一些联系。</p><p>「引爆点」看完以后我发现其实它根本没有直接跟互联网跟移动互联网有半毛钱的关系。但是它确实是在这个圈子里倍受推崇。看封面和封腰都有一堆大佬什么联袂推荐，很是反感。为什么呢，因为如果理解了流行的趋势，做出了倍受欢迎的互联网产品这都是金灿灿的钱钱啊，能不倍受推崇么。可是在我心里就有这么觉得变扭呢。我觉得马尔科姆·格拉德威尔写这本书，更加想解决的是能不能降低未成年人吸烟吸毒的人数。能不能提高儿童学习的效率。能不能降低城市的犯罪概率等等。简单来说就是如何运用这些原理来拯救世界。但是却被安利来做赚钱的东西。简单说来就是杀鸡用牛刀、高射炮打蚊子。说不出的别扭。</p><p>同样的情况发生在我看完「厚黑学」以后。在看之前我对「厚黑学」的想象是这是一本教人如何黑心假面的书。如何教人变成一个油腔滑调的人的书。在我的幼稚的心智里面觉得是一本贬义的书，一本黑暗的书。但是我某天无聊买回来看完以后觉得我靠真的可以算一本奇书。书里提到的方法和写下的当时的环境。作者提出的厚黑之术居然是为了拯救当时千疮百孔、摇摇欲坠的中国。而且按照我认知里面推算，应该是可行的方案。也就是说，「厚黑学」我觉得能算做国术，是有大智慧的。一个具有大智慧的治国之术在天朝大地流行的原因跟无数人挤破脑袋要去考公务员的原因是一样的时候，心中泛起当下所在的天朝是多么的荒诞无稽。</p><p>所以这两本书都给我一种作者是心怀天下交出了绝世武功本想要世人拯救世界，却被世人天天拿来打野鸡烤了吃。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>貌似我的记忆方法一直有问题，所以我有些事情会相当的记不住。人名就算一个。特别是国外翻译的人名。我脑子里面几乎就没几个。挤破脑袋只能想起K·K叫凯文·凯利。现在，我应该郑重的多记忆几次马尔科姆·格拉德威尔。今年应该会把他的几本书都扫一遍。</p><p>最后 ，「引爆点」5星推荐。并不是因为它可以让你一下就能做出个淘宝爆款出来。而是书里用科学的态度来说明了我们世界里面一些真实运作的原理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用，也欢迎在&lt;a href=&quot;http://creativecommons%E3%80%82org/licenses/by-nc/4%E3%80%820/deed%E3%80%82zh_TW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用&lt;a href=&quot;http://iiiyu%E3%80%82com/atom%E3%80%82xml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RSS&lt;/a&gt;方式订阅本站，这样您将能在第一时间获取本站信息。&lt;/p&gt;
&lt;h2 id=&quot;开篇扯淡&quot;&gt;&lt;a href=&quot;#开篇扯淡&quot; class=&quot;headerlink&quot; title=&quot;开篇扯淡&quot;&gt;&lt;/a&gt;开篇扯淡&lt;/h2&gt;&lt;p&gt;嗯，在一月的最后一天的最后一个小时开始写这篇读书笔记。也就算做这个月输出了3篇 blog。如果对比2014年这种令人发指的输出量来说。对于自己不得不说是一个巨大的进步。&lt;/p&gt;
&lt;p&gt;这本「引爆点」是在去上海开年会的来回路程上扫完的。顺便说一句，Sumi 除了Kevin Cao。其它全部在上海喝了残血回程的。 我还内伤了回来在医院躺了2天。 这是后话了。可见战斗力下降的厉害。&lt;/p&gt;
&lt;p&gt;最近我看书，一边看、一边会去联系一堆事物进行思考。因此现在的读书笔记也是想到什么写什么。并不是上学时候那种读书笔记顺序条例整齐的。算做观后随笔之类的吧。&lt;/p&gt;
&lt;p&gt;最后的一句扯淡，我不应该怎么晚才看到这本书。&lt;/p&gt;
    
    </summary>
    
    
      <category term="read book notes" scheme="http://iiiyu.com/tags/read-book-notes/"/>
    
  </entry>
  
  <entry>
    <title>2014年 Oh My Star 总结</title>
    <link href="http://iiiyu.com/2015/01/20/2014-oh-my-star-app-annual-summary/"/>
    <id>http://iiiyu.com/2015/01/20/2014-oh-my-star-app-annual-summary/</id>
    <published>2015-01-20T10:33:41.000Z</published>
    <updated>2015-12-29T18:23:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用，也欢迎在<a href="http://creativecommons.org/licenses/by/4.0/" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站，这样您将能在第一时间获取本站信息。</p><h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><p>最近啊一堆一堆的人们在晒自己的 App 收入。其实吧，2014年。我也参与弄了个工作以外的 App 出来。不过一直觉得这点收入太低实在不好意思说出来。不过看着大家都晒的好欢乐的样子也忍不住说说。（其实是看见有人垫底儿，哈我就不告诉你是谁）</p><h2 id="Oh-My-Star-缘起"><a href="#Oh-My-Star-缘起" class="headerlink" title="Oh My Star 缘起"></a>Oh My Star 缘起</h2><h3 id="软件想法"><a href="#软件想法" class="headerlink" title="软件想法"></a>软件想法</h3><p>这个想法其实挺早就由各种混沌的想法构成了。最开始的时候是大概 2013 年初左右，现在坐在我旁边的 linjunpop 高富帅他在 Github 上的 Star Repo 已经直逼2000+。王放放童鞋的也快1000+ 的 Star 数量。然后大家就在说做一个 App 来管理啊来管理。不过说归说。对于一群懒癌末期的人来说。说完我们就去联机打游戏去了。</p><p>不过我的 Star 数量也开始变得多起来。得益于我的渣记忆力和 Github 对已经 Star 过的项目的渣搜索能力。经常找一些记得 Star 过的项目，但是它已经淹没在茫茫 Repo 海了。</p><p>一直到大概2013年8月份的时候。我感觉吧，我特别需要一个管理 Github Star 的工具。没有怎么办，自己做呗。</p><p>鉴于我的渣编程能力和懒癌末期，我决定拖一个人来一起弄。所以，我把我师兄 Noark9 忽悠下水了。</p><a id="more"></a><h3 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h3><p>名字其实我挺早前就想好的，追述到我第一次使用 Oh My Zsh 的时候。惊为天人。感觉这个 shell 真她妈的叼。又再次鉴于我渣一般的洋文能力。我那会暗暗下定决心。我以后的项目都要叫 Oh My XXX。 简单又好记。还是向 Oh My Zsh 的致敬。（这个想法在微博上被萌妹子 Gril iOS 一语道破。这是后话。然后出现了也喜欢用 Oh My XXX 来命名自己项目的16岁少年 NSTongG，这更是后后话了 ）</p><p>所以，霸气的确定 这个管理 Github Star 的 App。名字叫做 Oh My Star。</p><h2 id="前期调研"><a href="#前期调研" class="headerlink" title="前期调研"></a>前期调研</h2><p>要钱没钱，要啥没啥。就有个想法，做个东西。还要忽悠其他人来做。这个不靠谱啊不靠谱，所以我装模作样的做了一下号称是前期调研的东西去忽悠我师兄。</p><p>我大概查看了一下 Github 的 ALEXA 排名。然后用 IP 数量加上预估拥有 Mac 的人的数量再乘了一个极小的百分比。得到最终 Oh My Star 的用户在1万用户到2万用户之间。</p><p>按照1万用户，9.9刀的定价计算</p><blockquote><p>10000 x 9.9 x 6.1 x 0.7  = 422730 rmb</p></blockquote><p>五五分以后，一人有20万耶。</p><p>马上就可以迎娶白富美，当上 CEO。走向人生巅峰了哦。</p><p>Noark9 被成功忽悠。 Get it.</p><h2 id="纠结的推进"><a href="#纠结的推进" class="headerlink" title="纠结的推进"></a>纠结的推进</h2><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>在幻想了人生巅峰以后。我们两个开始着手开发来着。那会我 iOS 都没有玩溜，Noark9 刚刚购买了 Macbook Air 的两个 OS X 初哥就开始吭哧吭哧写代码了。</p><p>我算懂一点点 Cocoa Touch。但是点开 Cocoa 的类。各种傻眼。还是她妈的很不一样啊。随便调用一下跟预期不符合啊。我熟悉的 ViewCotnroller 呢。 怎么拖出来怪怪的。怎么随便拖个 TextField 会多个东西嵌套着。然后，格志爆 iCloud bug 了。恩我跟师兄说了声去去就回，然后就留下我师兄一个人吭哧吭哧的弄了。去的时候喵了一眼恩，我师兄还在装 Ruby 呢。(我这么黑他不会被砍死哈)</p><p>过程就是各种腥风血雨啊。无数次想要放弃都是师兄抗过来了啊。（我就主要弄了下 Core Data 和 iCloud 部分）</p><p>所以 iOS 和 OS X 其实很不一样。从使用方式到产品设计再到代码编写。我倾向于认为他们是两套系统。只是恰好都使用了 Objective - C 而已（那会没有 发布 Swift好吧）当然目前两者开始大规模融合。不过我认为因为使用场景的不同，再设计产品的时候依然需要认为是两套系统。</p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>程序员写程序最怕啥。 做出来丑的像坨翔。师兄说这个样子看着不行啊。这么丑谁会花9.9刀买呢。 没人买，怎么去取自己的白富美啊。被师兄这么一说我也是鸭梨很大啊。所以我暗暗下定决心，不能让 Oh My Star 看起来太丑。</p><h4 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h4><p>当时我们大 Sumi 还是有全职设计师的哦。还是妹子哦。于是我花了两顿 KFC 的代价。忽悠了我们张玲玲同学来画 Oh My Star 的 UI。期间又不定期花费若干干锅田鸡、KFC 等资源。</p><h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><p>现在的图标是第二个版本。</p><p>第一个版本是我先用了一天学习了一下 Sketch。然后花了 2-3 天鲁了一个图标出来。像这样的<br><img src="http://ww2.sinaimg.cn/large/a6d3226bgw1eohixrvbz4j212m13y0we.jpg" alt=""></p><p>我会告诉你这个五角星的角度我算了几页草稿纸</p><p>后面上线以后有人说跟 QQ 空间一样一样的。然后师兄就开始用幽怨的眼神看我。意思是说操谁会花9.9刀买个 QQ 空间啊。这样我的白富美是娶不上了。我又再次暗暗下定决心，不能让 Oh My Star 的 icon 看起来太丑。</p><p>可是我画的师兄不满意啊。愁死我了。最后没办法我就在微博上找设计师啊。一个一个厚颜无耻的发私信过去说我是小鲜肉啊。赶紧点我点我啊。人家一看这是神经病吧，一开始没人理我。睡了一天晚上起来，后来有个设计师回复我了。是平潇大大。然后我就画了一个极其华丽的草图过去给他。</p><p>解释一下我的意图：</p><ol><li>我们是一个 Github 周边应用。如果可以，我很想把章鱼猫给搞进去。但是我们仔细看了 Github 版权和授权。是不可以出现章鱼猫的。</li><li>那不能出现我就想着，出现一部分是可以的吧。所以有个触手。暗喻章鱼猫。</li><li>这个触手在搞毛呢， 在整理星星啊。暗喻我们是一个管理 Github Star 的应用。</li></ol><p>嗯那，这就是我华丽的草图。<br><img src="http://ww4.sinaimg.cn/large/a6d3226bgw1eohj2w7jg2j21kw1kwk9m.jpg" alt=""></p><p>平潇大大就依靠我已经够详细的草图把 Oh My Star 的现在版本的 icon 画好了。<br><img src="http://ww1.sinaimg.cn/large/a6d3226bgw1eohj3axxr6j210y10ctf7.jpg" alt=""><br>(其实吧，现在有一个第三版本的图标哦。这是后话了)</p><h4 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h4><p><a href="http://ohmystarapp.com" target="_blank" rel="noopener">官网</a>的介绍是我写了中文，师兄以及贺锦同学帮忙翻译的。官网是我找了我高中同学夔大做的。官网之所以这么丑，是因为我真的找不到人来设计了。555。师兄我尽力了。</p><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>由于官网太丑。洋文介绍也不知道介绍清楚没有。我决定，弄个视频出来。然后我花了一天晚上写了个剧本。花了一下午录制了一下。花了几天学习了一下 iMovie 然后做出来了现在官网上的<a href="http://vimeo.com/83384649" target="_blank" rel="noopener">那个视频</a>。</p><h2 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h2><p>当上线以后，我以为。我就可以坐收绿油油的美刀了。可惜我错了。根本没有人购买！我做了个这么叼的诶噗噗出来。居然没有人知道。才意识到推广的作用。</p><p>推广做了以下几种</p><ol><li>论坛 V2EX Ruby-China</li><li>Weibo 的几个大 V：池院长 巧哥 大别 onevcat 等</li><li>邮件</li></ol><p>论坛就自己去发的帖子，然后弄了抽奖。送了一些兑换码。也有一些朋友支持。</p><p>然后厚着已经没有的脸皮去找池院长，巧哥。他们在微信公众号里面和微博推了。继续厚着脸皮找大别、onevcat。然后他们再微博上推了一下。同时配合着做了一周的半价。</p><p>说两个事情，一个是大家都很好，虽然平时感觉他们都是高冷的状态。但是一听说是独立开发者做的。大家都还是很 nice 的帮着宣传。二是，冰点这一周销售了到目前为止的80%以上的销量。所以很是感谢帮忙。</p><p>邮件是怎么一会事情呢。当时冰点一周过后，立马没有人买了。很是着急。然后我想了个办法，我在 Github 人肉找了一些 Star 数量超过500的人。然后发邮件去推销 Oh My Star。这样我一天发30封左右的邮件。可能会卖出1-2份。但是带来了巨大的副作用。有2个人直接回复骂娘。然后说 Oh My Star 是垃圾应用。其中一个还去推上@Github 说我滥用邮箱。叫把 Oh My Star 从 Github 里面除名。骂我可以，骂 Oh My Star 就怎么都忍不了。本来准备叫师兄批量爬邮箱然后发送推广邮件的。我反思了一下，觉得这个行为确实很不妥。然后就停止了发送邮件的这个行为。</p><h2 id="目前收益"><a href="#目前收益" class="headerlink" title="目前收益"></a>目前收益</h2><h3 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h3><p>被推广的第二天我一上线。喵神就说我发达了。 我一头雾水。然后他说已经在Developer Tools 中国区付费榜上排第一了。我一看我操，还真是。心里还是有点小激动搭。赶紧打开iTC去看卖了多少。结果才10几份。我这个落差的心情啊。连开发者的本都没有回来。不过由于各种时差的关系其实比这个多一些。只是报表还没出来。后来居然出现在了中国区付费总榜前10了。其实那会也就50几份。后来一直冲到总版第三。虽然只是短短的几个小时，但是对我来说这个意义还是非常大的。说出去也是可以装逼了的。</p><h3 id="收益"><a href="#收益" class="headerlink" title="收益"></a>收益</h3><p>目前用户是 414.<br>购买用户是 265.其中80%是冰点购入<br>目前上线一年总收益是1300刀。（没有算2年的 Mac 开发者。一堆其他投入： KFC 啥的）然后五五分。（我感觉我需要躲着我师兄了）<br><img src="http://ww2.sinaimg.cn/large/a6d3226bgw1eohivjh2z7j21kw0r9aco.jpg" alt=""></p><p>多说两句：其实吧，感觉没有赚钱相反用的更多了。因为一旦我看见卖出一个，我就会说，恩今天可以加个肉。 卖出2个我就会,恩今天这个贵的 App 可以入了。这样不知不觉其实钱都还没有拿到手。就花费出去了，结果第二天一看，人家退款了。欲哭无泪啊都。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>首先感谢购买和使用 Oh My Star 的用户。然后再次感谢这篇文章里面出现过的所有人。哦对了有两个没有提到 一个是 ianva 他提供了现在 readme 的样式文件。一个是 Ruby-China 上为 Oh My Star 写了一个 alfred workflow 的用户。同样很感谢。</p><h3 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h3><p>我和师兄以及全部参与 Oh My Star 项目的人。全部都是在线上沟通以及协作。<br>使用到了一下工具：</p><ol><li>Github</li><li>QQ</li><li>Trello</li><li>Heroku</li><li>Gmail</li></ol><h3 id="这一年学习到了什么"><a href="#这一年学习到了什么" class="headerlink" title="这一年学习到了什么"></a>这一年学习到了什么</h3><ol><li>以后我做的软件将会永远不降价。因为根据我自己的体验来说。本来我很开心的买了 App 使用着。就算隔了半年之久看见他降价了我还是会很伤心。同样我的用户也会有这样的感受。所以以后我做的软件将会永远不降价。</li><li>因为 MAS 的机制和一些市场上的考虑。不管是 iOS 还是 OS X 的 App 。都应该是 免费 + IAP 模式。这样一定是主流的配置。</li></ol><h3 id="问-amp-答"><a href="#问-amp-答" class="headerlink" title="问 &amp; 答"></a>问 &amp; 答</h3><p>问：Oh My Star 以后会降价么</p><p>答：不会</p><p>问：Oh My Star 以后会涨价么</p><p>答：看心情</p><p>问：怎么购买 Oh My Star</p><p>答：猛击<a href="https://itunes.apple.com/us/app/oh-my-star/id788446112?l=en&amp;mt=12" target="_blank" rel="noopener">连接</a></p><p>问 ：OMS 很久没有更新了，还会维护更新么。</p><p>答 ：会。16岁很厉害的小哥 NSTongG 已经答应帮 OMS 修复 bug 了。</p><p>问 ： OMS 的未来有什么打算</p><p>答 ： 有一个大大的计划</p><p>问 ： 那这个大大的计划会去实现么</p><p>答 ： 会</p><p>问 ： 什么时候呢</p><p>答 ： 遥遥无期（遁走）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用，也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by/4.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站，这样您将能在第一时间获取本站信息。&lt;/p&gt;
&lt;h2 id=&quot;开篇扯淡&quot;&gt;&lt;a href=&quot;#开篇扯淡&quot; class=&quot;headerlink&quot; title=&quot;开篇扯淡&quot;&gt;&lt;/a&gt;开篇扯淡&lt;/h2&gt;&lt;p&gt;最近啊一堆一堆的人们在晒自己的 App 收入。其实吧，2014年。我也参与弄了个工作以外的 App 出来。不过一直觉得这点收入太低实在不好意思说出来。不过看着大家都晒的好欢乐的样子也忍不住说说。（其实是看见有人垫底儿，哈我就不告诉你是谁）&lt;/p&gt;
&lt;h2 id=&quot;Oh-My-Star-缘起&quot;&gt;&lt;a href=&quot;#Oh-My-Star-缘起&quot; class=&quot;headerlink&quot; title=&quot;Oh My Star 缘起&quot;&gt;&lt;/a&gt;Oh My Star 缘起&lt;/h2&gt;&lt;h3 id=&quot;软件想法&quot;&gt;&lt;a href=&quot;#软件想法&quot; class=&quot;headerlink&quot; title=&quot;软件想法&quot;&gt;&lt;/a&gt;软件想法&lt;/h3&gt;&lt;p&gt;这个想法其实挺早就由各种混沌的想法构成了。最开始的时候是大概 2013 年初左右，现在坐在我旁边的 linjunpop 高富帅他在 Github 上的 Star Repo 已经直逼2000+。王放放童鞋的也快1000+ 的 Star 数量。然后大家就在说做一个 App 来管理啊来管理。不过说归说。对于一群懒癌末期的人来说。说完我们就去联机打游戏去了。&lt;/p&gt;
&lt;p&gt;不过我的 Star 数量也开始变得多起来。得益于我的渣记忆力和 Github 对已经 Star 过的项目的渣搜索能力。经常找一些记得 Star 过的项目，但是它已经淹没在茫茫 Repo 海了。&lt;/p&gt;
&lt;p&gt;一直到大概2013年8月份的时候。我感觉吧，我特别需要一个管理 Github Star 的工具。没有怎么办，自己做呗。&lt;/p&gt;
&lt;p&gt;鉴于我的渣编程能力和懒癌末期，我决定拖一个人来一起弄。所以，我把我师兄 Noark9 忽悠下水了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="just-talk" scheme="http://iiiyu.com/tags/just-talk/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 「疯传」</title>
    <link href="http://iiiyu.com/2015/01/16/read-contagious/"/>
    <id>http://iiiyu.com/2015/01/16/read-contagious/</id>
    <published>2015-01-16T10:37:06.000Z</published>
    <updated>2015-01-16T17:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用，也欢迎在<a href="http://creativecommons%E3%80%82org/licenses/by-nc/4%E3%80%820/deed%E3%80%82zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用<a href="http://iiiyu%E3%80%82com/atom%E3%80%82xml" target="_blank" rel="noopener">RSS</a>方式订阅本站，这样您将能在第一时间获取本站信息。</p><h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><p>连续三年了，我都只有1月有写过读书笔记。今年又是如此。我只能为自己找个台阶下。懒癌末期患者，请这个世界多给一点点宽容。</p><p>记不得上次看完一本书是什么时候了，最近一年来如果一本书看了超过24小时。那我是绝对的看不完。 能看完的都是花了一个通宵就看了。</p><p>对了，元旦在动车上重新看了一下修摩托车。 那本书看了2年了，断断续续的。就没有看完过。</p> <a id="more"></a><h2 id="疯传"><a href="#疯传" class="headerlink" title="疯传"></a>疯传</h2><h3 id="病毒式传播"><a href="#病毒式传播" class="headerlink" title="病毒式传播"></a>病毒式传播</h3><p>开头和结尾都说了一个事情。就是近年来出现了一些爆炸性的传播事件和产品。他们的传播方式都是类似病毒的传播方式。</p><p>来来来科普一下<a href="http://zh%E3%80%82wikipedia%E3%80%82org/wiki/%E7%97%85%E6%AF%92#%E3%80%82E7%E3%80%8297%E3%80%8285%E3%80%82E6%E3%80%82AF%E3%80%8292%E3%80%82E8%E3%80%8288%E3%80%8287%E3%80%82E4%E3%80%82BA%E3%80%82BA%E3%80%82E9%E3%80%82A1%E3%80%829E%E3%80%82E7%E3%80%8296%E3%80%82BE%E3%80%82E7%E3%80%8297%E3%80%8285" target="_blank" rel="noopener">病毒</a>。<a href="http://zh%E3%80%82wikipedia%E3%80%82org/wiki/%E7%97%85%E6%AF%92%E8%90%A5%E9%94%80" target="_blank" rel="noopener">病毒营销</a></p><p>而整本书就是在说，要构建一次病毒营销需要怎么做。并且有一些实验结果和真实世界的案例来支撑他要表达的理论。</p><h3 id="六条原则-SETPPS"><a href="#六条原则-SETPPS" class="headerlink" title="六条原则 SETPPS"></a>六条原则 SETPPS</h3><p>疯传的主体主要围绕着下面六条原则在进行表述。</p><h4 id="社交货币"><a href="#社交货币" class="headerlink" title="社交货币"></a>社交货币</h4><p>我们会共享那些让我们显得更优秀的事情。</p><h4 id="诱因"><a href="#诱因" class="headerlink" title="诱因"></a>诱因</h4><p>顶尖的记忆，风口浪尖的提醒。</p><h4 id="情绪"><a href="#情绪" class="headerlink" title="情绪"></a>情绪</h4><p>当我们关心时，我们回去共享。</p><h4 id="公共性"><a href="#公共性" class="headerlink" title="公共性"></a>公共性</h4><p>构建可视的、正面的事物。</p><h4 id="实用价值"><a href="#实用价值" class="headerlink" title="实用价值"></a>实用价值</h4><p>如果有用，人们会情不自禁的共享。</p><h4 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h4><p>以闲聊为幌子的信息传播</p><p>以上大概就是这本30块。240页的精华终结内容。</p><h2 id="自己的思考（下面是吐槽时间）"><a href="#自己的思考（下面是吐槽时间）" class="headerlink" title="自己的思考（下面是吐槽时间）"></a>自己的思考（下面是吐槽时间）</h2><h3 id="人"><a href="#人" class="headerlink" title="人"></a>人</h3><p>其实吧，我觉得。除了一些探索宇宙奥秘或者探索其他普通人感觉没啥用的科学领域。这个世界的绝大部分人类。都是在研究人。</p><p>我开个馆子吧。 要研究人喜欢吃啥。<br>我卖个衣服吧。要研究人喜欢穿啥。<br>我想当个总统吧。要研究把其他人的选票搞过来。<br>我想当升个官吧。要研究领导的喜好。<br>我想做个 App 吧。要研究最近的人缺啥东西。<br>我想拍个电视剧吧。要研究这人体的胸要怎么才能不在摄像范围内。</p><p>「疯传」通篇读下来。无非就是人性二字。</p><h3 id="我思考的六条原则"><a href="#我思考的六条原则" class="headerlink" title="我思考的六条原则"></a>我思考的六条原则</h3><h4 id="社交货币-1"><a href="#社交货币-1" class="headerlink" title="社交货币"></a>社交货币</h4><p>人是社交动物。社交是人的一部分。人并不能在这个世界上单独存在。所以，病毒营销的基石就是说。人终归要交流的。但你在交流的时候，你需要一些素材。这些素材用来满足你的虚荣心，荣誉感。让你在社交中显得与众不同。显的更加优秀。</p><p>这个道理对于从小喜欢看动物世界的我来说非常容易理解。这是天性。是一种繁殖的本能。把自己突出于周围的同类。可以获得更加优秀的交配对象。从而产下优良的后代。这种天性我估摸着是写到 DNA 里面的。所以你可以看到都是晒美食、晒豪车、晒出国旅游。</p><p>在我看来都是基因里面在说：“hi，我是个强壮又富有魅力的异性哦。来一起啪啪啪吧”</p><p>扯远了。拉回来，作者提出了社交货币（Social Currency）这种概念是什么意思呢。其实还是很好理解的。货币用来干嘛？交换嘛。那社交货币也是用来交换使用的。货币还具备了流通性。所以作者的这个提法我认为是恰到好处的。</p><p>所以这条原则其实就是说。要传播的基石。首先这个事件或者产品要能体现出知道你这个事情的人的优越性。说人话就是：知道这个事情的人就可以升职、加薪、当上 CEO 、迎娶白富美。走向人生巅峰了。至少感觉如此。</p><h4 id="诱因-1"><a href="#诱因-1" class="headerlink" title="诱因"></a>诱因</h4><p>这个世界上没有平白无故的爱、也没有莫名其妙的恨。你要传播一个事件或者产品。你肯定需要一个理由。<br>爱一个人需要理由吗？需要吗？需要吗！<br>诱因相当于这个事件的前置铺垫。看这个章节的时候，我脑海里面总会出现美剧里面的一些画面。大概就是看上去无关紧要的地方。恰好是关键的点。</p><p>就像蝴蝶效应一样。诱因的在于，它导致的结果会放大很多个数量级。卷起海啸。</p><h4 id="情绪-1"><a href="#情绪-1" class="headerlink" title="情绪"></a>情绪</h4><p>还是在说人。人这种复杂的物种在开心和难过的时候都会做出一些强烈的举动。所以，可以利用这一点，来进行传播。书中也很明确的说了。开心和难过都具备很高的传播性质。</p><p>举个开心的例子：国足2连胜<br>举个悲伤的例子：姚贝娜病逝</p><h4 id="公共性-1"><a href="#公共性-1" class="headerlink" title="公共性"></a>公共性</h4><p>这个感觉没啥好说的，如果是大熊猫要明天要灭绝了。肯定全世界都陷入悲痛。但是如果是 Sumi 肠粉要挂了。 明天就我悲伤了。</p><h4 id="实用价值-1"><a href="#实用价值-1" class="headerlink" title="实用价值"></a>实用价值</h4><p>举个例子：先不管到底实用不实用的问题。你看 QQ 空间 or WeChat 里面爹妈辈转发那些惨不忍睹的“使用 xx 小技巧”“xx 健康饮食大法”。 你就可以知道如果具备实用价值 or 看上去具备实用价值的东西是容易传播的。</p><h4 id="故事-1"><a href="#故事-1" class="headerlink" title="故事"></a>故事</h4><p>能说的一手好故事太 tm 重要了。你都不用说的多长。能在140字以内吧故事说好了。你都是日入几十万的人了呢。（原谅我的夸张）我们称为段子手。能吧传播的东西埋藏在故事里面的。 我们叫软文。<br>这个很好找例子，最近有关注 天才小熊猫。 微博上写软文目测不说第一，前三应该有的。你去看看他的转发量就知道一个好故事是多么具备传播力量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>书中提到 「引爆点」这本书多次。 下本书应该就是它了。</li><li>都什么年代了，生病了能不能相信科学，相信现代医学。那可是你自己的命呐。</li><li>好多想吐槽的，写着写着就忘记了</li><li>over </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用，也欢迎在&lt;a href=&quot;http://creativecommons%E3%80%82org/licenses/by-nc/4%E3%80%820/deed%E3%80%82zh_TW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助，您可以使用&lt;a href=&quot;http://iiiyu%E3%80%82com/atom%E3%80%82xml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RSS&lt;/a&gt;方式订阅本站，这样您将能在第一时间获取本站信息。&lt;/p&gt;
&lt;h2 id=&quot;开篇扯淡&quot;&gt;&lt;a href=&quot;#开篇扯淡&quot; class=&quot;headerlink&quot; title=&quot;开篇扯淡&quot;&gt;&lt;/a&gt;开篇扯淡&lt;/h2&gt;&lt;p&gt;连续三年了，我都只有1月有写过读书笔记。今年又是如此。我只能为自己找个台阶下。懒癌末期患者，请这个世界多给一点点宽容。&lt;/p&gt;
&lt;p&gt;记不得上次看完一本书是什么时候了，最近一年来如果一本书看了超过24小时。那我是绝对的看不完。 能看完的都是花了一个通宵就看了。&lt;/p&gt;
&lt;p&gt;对了，元旦在动车上重新看了一下修摩托车。 那本书看了2年了，断断续续的。就没有看完过。&lt;/p&gt;
    
    </summary>
    
    
      <category term="read book notes" scheme="http://iiiyu.com/tags/read-book-notes/"/>
    
  </entry>
  
  <entry>
    <title>iOS 学习笔记 (36)  ReactiveCocoa 用 RACSignal 替代 Delegate</title>
    <link href="http://iiiyu.com/2014/12/26/learning-ios-notes-thirty-six/"/>
    <id>http://iiiyu.com/2014/12/26/learning-ios-notes-thirty-six/</id>
    <published>2014-12-26T05:36:31.000Z</published>
    <updated>2014-12-28T14:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><p>最近又在看  ReactiveCocoa 了（下面用 RAC 来替代 ReactiveCocoa）。虽然依然是 hello world 级别。但是 hello world 也是可以分级别的。这次自我感觉是一个偏向中级的 hello world。</p><p>我们先来张图：</p><p><img src="http://ww4.sinaimg.cn/large/a6d3226bgw1enpq6o5sz5j20ai09uglz.jpg" alt=""></p><p>在 RAC 的文档和一些介绍 RAC 的 Keynote 资料里面我们可以看到说 RACSignal 可以来替代 Delegate、 Block Callbacks、Target Action、KVO、Notifications。</p><p>但是貌似没有一种 hello world 的方式来进行说明如何替代的。</p><p>插嘴:在中文 blog 里面见过几个写 RAC 的比较好哒。一个是<a href="http://limboy.me" target="_blank" rel="noopener">limboy大大</a>的几篇深入浅出令人叹为观止，李忠大大不但研究透彻了然后还结合自己的实战经验写成很好的文章来分享。 另一个是<a href="http://blog.sunnyxx.com/tags/Reactive%20Cocoa%20Tutorial/" target="_blank" rel="noopener">sunnyxx的Reactive Cocoa Tutorial系列</a>这个系列比较偏向研究 RAC 是如何实现和工作的。</p><p>我这个人比较笨，最喜欢写 hello world。那就找时间一个一个来写呗。</p><p>写之前 Google 了一下。所以以下内容大量参考:<a href="http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/" target="_blank" rel="noopener">Replacing the Objective-C “Delegate Pattern” with ReactiveCocoa</a>。能看原文就去看看。然后忽略掉以下的 hello world 就好了。</p><a id="more"></a><h2 id="实现功能说明"><a href="#实现功能说明" class="headerlink" title="实现功能说明"></a>实现功能说明</h2><p>本来想改成 TableView 的。改着改着感觉 TableView 的话。可能会牵扯到 MVVM 的问题。 才能架构出来一个正确的程序结构。而我只想说明简单的写清楚如何替代Delegate。所以相当于一个中文简化版本的 <a href="http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/" target="_blank" rel="noopener">Replacing the Objective-C “Delegate Pattern” with ReactiveCocoa</a>了。</p><p>那就跟他一样写搜索把。然后实现过程中发现 iOS 8 用新的 UISearchController 来替代了 UISearchDisplayController 了。 </p><h2 id="UISearchController-Delegate-常规实现"><a href="#UISearchController-Delegate-常规实现" class="headerlink" title="UISearchController Delegate 常规实现"></a>UISearchController Delegate 常规实现</h2><p>一般来说我们会设置protocol.</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.searchController.searchResultsUpdater = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.searchController.delegate = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure><p>然后去委托的类里面实现相关的方法</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">#pragma</span> <span class="keyword">mark </span>- UISearchResultsUpdating</span><br><span class="line"></span><br><span class="line">- (void)updateSearchResultsForSearchController:(UISearchController *)searchController</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">if</span> (searchController.searchBar<span class="meta">.text</span>.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">self.searchResults </span>= [<span class="keyword">self </span>search:searchController.searchBar<span class="meta">.text</span>]<span class="comment">;</span></span><br><span class="line">    &#125; <span class="meta">else</span> &#123;</span><br><span class="line">        <span class="keyword">self.searchResults </span>= <span class="keyword">self.searchTexts;</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self.tableView </span>reloadData]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma mark - UISearchControllerDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)willPresentSearchController:(<span class="built_in">UISearchController</span> *)searchController</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span>.searching = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)willDismissSearchController:(<span class="built_in">UISearchController</span> *)searchController</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span>.searching = <span class="literal">NO</span>;</span><br><span class="line">    [<span class="keyword">self</span>.tableView reloadData];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通情况下我们就是这样来使用 Delegate 的。</p><p>平淡无奇。下面我们来用 RACSignal 的实现方法。</p><h2 id="UISearchController-Delegate-RACSignal-实现"><a href="#UISearchController-Delegate-RACSignal-实现" class="headerlink" title="UISearchController Delegate RACSignal 实现"></a>UISearchController Delegate RACSignal 实现</h2><p>第一个要明确的是：我们要做什么。</p><h3 id="常规模式"><a href="#常规模式" class="headerlink" title="常规模式"></a>常规模式</h3><p>根据常规代码来看:</p><ol><li>我们需要在每次输入词变化的时候进行搜索。</li><li>需要在进入和退出搜索的时候知道当前状态</li></ol><p>1对应的就是实现- (void)updateSearchResultsForSearchController:(UISearchController *)searchController</p><p>2对应的是实现- (void)willPresentSearchController:(UISearchController <em>)searchController 和 - (void)willDismissSearchController:(UISearchController </em>)searchController。</p><p>现在，让我们来转换为 RAC 的思维模式思考问题。 </p><h3 id="RAC-模式"><a href="#RAC-模式" class="headerlink" title="RAC 模式"></a>RAC 模式</h3><ol><li>UI 上需要搜索结果的 NSArray</li><li>搜索结果由搜索关键字得来。</li><li>每次修改关键字都应该更新搜索结果。</li></ol><p>因此我们要想办法吧 UI 上需要的数据和修改关键字这个动作绑定起来。 </p><p>同理可以很容易想到。我们也需要把当前 UI 是否处于搜索状态跟会改变搜索状态的动作绑定起来。 </p><p>要怎么绑定呢？ 拥有刚刚 RAC 超过 Hello World 实力的我，想到，我需要构建出来两个RACSignal。</p><p>然后进行类似：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RAC(<span class="name">self</span>, searchResults) = SignalA<span class="comment">;</span></span><br><span class="line">RAC(<span class="name">self</span>, searching) = SignalB<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这样的绑定就皆大欢喜了。 </p><p>主要用到了下面两个 RAC 的方法：</p><p><strong>rac_signalForSelector:fromProtocol:</strong></p><p>这个方法主要是把 protocal 转为一个 Signal 便于使用。值得注意的是这个函数返回的是一个 RACTuple。 这个 RACTuple 包含了 Selector 方法里面所有的参数。这样需要用到的时候主要按照顺序来获取。</p><p><strong>rac_liftSelector:withSignalsFromArray:</strong></p><p>这个方法它的意思是当传入的 Signals 都至少sendNext过一次，接下来只要其中任意一个signal有了新的内容。就会去触发第一个 selector 参数的方法。</p><p>构造两个 Signal 的代码如下 </p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  UISearchController+RAC.m</span></span><br><span class="line"></span><br><span class="line">- (RACSignal *)rac_textSignal</span><br><span class="line">&#123;</span><br><span class="line">    self.searchResultsUpdater = self;</span><br><span class="line">    RACSignal *<span class="keyword">signal</span><span class="string"> </span>= objc_getAssociatedObject(self, _cmd);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">signal</span><span class="string"> !</span>= nil) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">signal</span><span class="string"></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">signal</span><span class="string"> </span>= [[self <span class="attribute">rac_signalForSelector</span>:@selector(<span class="attribute">updateSearchResultsForSearchController</span>:) <span class="attribute">fromProtocol</span>:@protocol(UISearchResultsUpdating)] <span class="attribute">map</span>:^id(RACTuple *tuple) &#123;</span><br><span class="line"></span><br><span class="line">        UISearchController *searchController = tuple.first;</span><br><span class="line">        <span class="keyword">return</span> searchController.searchBar.text;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    objc_setAssociatedObject(self, _cmd, <span class="keyword">signal</span><span class="string"></span>, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">signal</span><span class="string"></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (RACSignal *)rac_isActiveSignal</span><br><span class="line">&#123;</span><br><span class="line">    self.delegate = self;</span><br><span class="line">    RACSignal *<span class="keyword">signal</span><span class="string"> </span>= objc_getAssociatedObject(self, _cmd);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">signal</span><span class="string"> !</span>= nil) <span class="keyword">return</span> <span class="keyword">signal</span><span class="string"></span>;</span><br><span class="line"></span><br><span class="line">    RACSignal *willPresentSearching = [[self <span class="attribute">rac_signalForSelector</span>:@selector(<span class="attribute">willPresentSearchController</span>:) <span class="attribute">fromProtocol</span>:@protocol(UISearchControllerDelegate)] <span class="attribute">mapReplace</span>:@YES];</span><br><span class="line">    RACSignal *willDismissSearching = [[self <span class="attribute">rac_signalForSelector</span>:@selector(<span class="attribute">willDismissSearchController</span>:) <span class="attribute">fromProtocol</span>:@protocol(UISearchControllerDelegate)] <span class="attribute">mapReplace</span>:@NO];</span><br><span class="line">    <span class="keyword">signal</span><span class="string"> </span>= [RACSignal <span class="attribute">merge</span>:@[willPresentSearching, willDismissSearching]];</span><br><span class="line">    objc_setAssociatedObject(self, _cmd, <span class="keyword">signal</span><span class="string"></span>, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">signal</span><span class="string"></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终绑定代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  RACMasterViewController.m</span></span><br><span class="line"></span><br><span class="line">    RAC(<span class="keyword">self</span>, searchResults) = [<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(search:) withSignalsFromArray:@[<span class="keyword">self</span>.searchController.rac_textSignal]];</span><br><span class="line">    [<span class="keyword">self</span>.searchController.rac_textSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.tableView reloadData];</span><br><span class="line">    &#125;];</span><br><span class="line">    RAC(<span class="keyword">self</span>, searching) = [<span class="keyword">self</span>.searchController rac_isActiveSignal];</span><br></pre></td></tr></table></figure><p>这样我们就写完了一个用 RAC 来替代 Delegate （protocol） 的例子</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用 RAC 其实最重要的思维的转变。 这个转变在写代码的时候如果我没有思考的很清楚。 那我写出来就一团乱麻。还是需要多加锻炼 MVVM 的思维。</p><p><a href="https://github.com/iiiyu/RACSignalDemo" target="_blank" rel="noopener">实例代码已经上传Github</a></p><p>下集预告 用 RACSignal 替代 Block Callbacks。有人会期待么？</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ol><li><a href="http://limboy.me" target="_blank" rel="noopener">limboy大大</a></li><li><a href="http://blog.sunnyxx.com/tags/Reactive%20Cocoa%20Tutorial/" target="_blank" rel="noopener">sunnyxx的Reactive Cocoa Tutorial系列</a></li><li><a href="http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/" target="_blank" rel="noopener">Replacing the Objective-C “Delegate Pattern” with ReactiveCocoa</a></li><li><a href="https://speakerdeck.com/robpearson/reactivecocoa-lessons-learned" target="_blank" rel="noopener">ReactiveCocoa Lessons Learned</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用,也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/deed.zh_TW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站,这样您将能在第一时间获取本站信息.&lt;/p&gt;
&lt;h2 id=&quot;开篇扯淡&quot;&gt;&lt;a href=&quot;#开篇扯淡&quot; class=&quot;headerlink&quot; title=&quot;开篇扯淡&quot;&gt;&lt;/a&gt;开篇扯淡&lt;/h2&gt;&lt;p&gt;最近又在看  ReactiveCocoa 了（下面用 RAC 来替代 ReactiveCocoa）。虽然依然是 hello world 级别。但是 hello world 也是可以分级别的。这次自我感觉是一个偏向中级的 hello world。&lt;/p&gt;
&lt;p&gt;我们先来张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/a6d3226bgw1enpq6o5sz5j20ai09uglz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 RAC 的文档和一些介绍 RAC 的 Keynote 资料里面我们可以看到说 RACSignal 可以来替代 Delegate、 Block Callbacks、Target Action、KVO、Notifications。&lt;/p&gt;
&lt;p&gt;但是貌似没有一种 hello world 的方式来进行说明如何替代的。&lt;/p&gt;
&lt;p&gt;插嘴:在中文 blog 里面见过几个写 RAC 的比较好哒。一个是&lt;a href=&quot;http://limboy.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;limboy大大&lt;/a&gt;的几篇深入浅出令人叹为观止，李忠大大不但研究透彻了然后还结合自己的实战经验写成很好的文章来分享。 另一个是&lt;a href=&quot;http://blog.sunnyxx.com/tags/Reactive%20Cocoa%20Tutorial/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sunnyxx的Reactive Cocoa Tutorial系列&lt;/a&gt;这个系列比较偏向研究 RAC 是如何实现和工作的。&lt;/p&gt;
&lt;p&gt;我这个人比较笨，最喜欢写 hello world。那就找时间一个一个来写呗。&lt;/p&gt;
&lt;p&gt;写之前 Google 了一下。所以以下内容大量参考:&lt;a href=&quot;http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Replacing the Objective-C “Delegate Pattern” with ReactiveCocoa&lt;/a&gt;。能看原文就去看看。然后忽略掉以下的 hello world 就好了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://iiiyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iCloud 和 iCloud Drive</title>
    <link href="http://iiiyu.com/2014/10/20/iCloud-and-iCloud-Drive/"/>
    <id>http://iiiyu.com/2014/10/20/iCloud-and-iCloud-Drive/</id>
    <published>2014-10-19T11:25:52.000Z</published>
    <updated>2014-11-02T17:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/3.0/deed.zh" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><ol><li>好久没有写 blog 了。 </li><li>最近发现很多人对 iCloud 和 iCloud Drive 有些误解。而还没有看见中文里面有一个比较正确的说法。</li><li>加上近两年来工作就是在学习 iCloud 如何使用。最近一个月做客服小弟回复了 N 个 iCloud 的问题。所以感觉还是有一些价值的。特意想记录一下。</li></ol><h2 id="是否升级到-iCloud-Drive"><a href="#是否升级到-iCloud-Drive" class="headerlink" title="是否升级到 iCloud Drive"></a>是否升级到 iCloud Drive</h2><p>在 iOS 8 刚刚上线的时候，用户更新了以后。第一次会跳出来，说需要重新升级的 iCloud Drive。因为没有更多的信息和提示，我想一个正常的用户应该都会去点击升级。结果就是导致很多使用 iCloud 这个功能的 App 数据出现问题。或者导致了设备之间的不同步。那会有很多文章在建议不要升级 iCloud Drive。所以可能会给后来升级到 iOS 8 的用户造成一定的心里作用说升级 iCloud Drive 是不可靠的。</p><p>其实根据我两年来 iCloud 的经验和测试结果。 iOS 8 的 iCloud Drive 是一个 Apple 云端的一次最重要的里程碑。 是 iCloud 这个技术在 Apple 产品系列上第一次做到了可用的状态。等了三年终于有个云的模样了。</p><p>当时不建议升级 iCloud Drive 的理由其实就两个：</p><ol><li>对于开发者来说，由于 Apple 为了保密 iPhone 6 和 iPhone 6 Plus。 其实在9月发布会之前。 iOS 8 的 最后两个 Beta 版本是没有提供给开发者的。在能获得的最后的 Beta 版本上。 开发者使用 iCloud 依然各种莫名其妙的问题。一直到 GM 版本才变得正常。这样导致 GM 到发布正式的版本之间的时间。大部分开发者还无法把更新 iCloud 的技术及时的完善在自己的 App 里面。</li><li>另外一个是在 iOS 8 已经放出来的时候，OS X 10.10 还没有放出来。这样如果你是一个 Apple 一套的普通用户。就会导致你一些全平台使用 iCloud 技术的 App无法相互同步。所以在当时确实这样情况的普通用户应该谨慎更新。</li></ol><p>现在11月了这两个问题随着开发者对 App 的完善和 OS X 10.10 释出。其实都不是问题了。大家可以放心大胆的升级了。</p><a id="more"></a><h2 id="iCloud-升级到-iCloud-Drive-具体是做了什么事情"><a href="#iCloud-升级到-iCloud-Drive-具体是做了什么事情" class="headerlink" title="iCloud 升级到 iCloud Drive 具体是做了什么事情"></a>iCloud 升级到 iCloud Drive 具体是做了什么事情</h2><p>首先需要明确的是，iCloud 升级到 iCloud Drive。只跟你的 Apple ID 相关。并且这个过程不可以逆转。</p><h3 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h3><p>对于普通用户来说应当就是一次在服务端的数据迁移。把之前的存储在 iCloud 服务器上的全部数据迁移到了 iCloud Drive 的服务器。从此以后你的 iCloud 数据都是从 iCloud Drive 服务器上读取了。</p><p>基于这种逻辑支持 iCloud 的应用，理论上 100% 可以使用 iCloud Drive。</p><p>但是事实上并不是所有的应用在升级了 iCloud Drive 以后都可以使用。</p><p>Why？</p><p>先解释一个现象，就是在一开始升级了 iOS 8 然后升级了 iCloud Drive 立马就打开了某 App 发现 iCloud 的数据没了。 结果睡觉起来再打开就有了。这种的原因很简单，就是 iCloud 服务器上的数据迁移到 iCloud Drive 服务器上是需要拷贝时间的。数据还没有迁移完成的时候你打开当然没有。等到数据迁移完成了，你再打开它就有数据了。</p><h3 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h3><p>PS：普通用户可以略过此小结<br>这次 iOS 8 的升级，一开始就是对使用 iCloud 开发者的一次噩梦。</p><ol start="0"><li>iCloud 服务器数据到 iCloud Drive 服务器数据的迁移。</li><li>客户端下面 iCloud 的 Container ID 发生变化。之前是 Term ID.xxxx。现在是 iCloud.xxxx。当然已经上架的应用的 Container ID 是还存在的。但是这个变化从来就没有在文档里面提过（可能现在有了，反正当时没有看见过）导致的结果就是如果容器空间没有选择正确。必然读取不到老数据。</li><li>由于 iOS 8 升级需要很大的空间，有部分用户可能是选择重新安装一个新 iOS 8 或者是入了一台新的手机。 但是没有升级 iCloud Drive。这种情况下，会导致 App 无法找到 iCloud 的路径。也是坑的不行</li></ol><p>目前能回忆起来比较坑的就这两个，这些都是开发者必须处理的情况。如果开发者花费巨大的力气处理好了，用户其实是感受不到的。这是最好的情况。如果技术不过关，处理不好。用户就上门开始骂了。（PS：这是一个悲伤的故事）</p><h2 id="CloudKit"><a href="#CloudKit" class="headerlink" title="CloudKit"></a>CloudKit</h2><p>CloudKit 是今年提出来的新技术。</p><h3 id="普通用户-1"><a href="#普通用户-1" class="headerlink" title="普通用户"></a>普通用户</h3><p>使用这个技术的 App 都是靠谱的</p><h3 id="开发者-1"><a href="#开发者-1" class="headerlink" title="开发者"></a>开发者</h3><p>简单说来就是一个 Apple 版本的 Parse。具体去看文档不展开说明了。</p><h2 id="一些存储路径的说明"><a href="#一些存储路径的说明" class="headerlink" title="一些存储路径的说明"></a>一些存储路径的说明</h2><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>iOS 由于沙箱的原因。其实普通用户看不见什么。不过可以肯定的是。在系统路径下面。 iOS 是有 iCloud 数据的缓存目录进行数据缓存的。简单说来就是使用 iCloud 的应用在删除的时候。 iCloud 缓存里面的数据是不会立马删除的。什么时候清空，未知。</p><h3 id="OS-X"><a href="#OS-X" class="headerlink" title="OS X"></a>OS X</h3><p>OS X 可以看见的就比较多了。</p><h4 id="Finder-里面的-iCloud-Drive"><a href="#Finder-里面的-iCloud-Drive" class="headerlink" title="Finder 里面的 iCloud Drive"></a>Finder 里面的 iCloud Drive</h4><p>这里其实由两个部分组成：</p><ol><li>是 /Library/Mobile Documents/comappleCloudDocs</li><li>是使用 iCloud 技术把一些数据文件存储到了自己 iCloud 容器路径下的 Documents 目录里面。</li></ol><p>把 Finder 里面这个 iCloud Drive 当作 Dropbox （网盘）使用。那你丢进去的文件数据都是在<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`/Library/Mobile Documents/comappleCloudDocs</span><br></pre></td></tr></table></figure></p><p>`这里路径下面。</p><p>而你为什么可以看见一些 App 名字的文件夹呢。就是第二个部分容器自己的 Documents 目录。你可能会问为啥不是全部使用 iCloud 技术的都有这个目录呢？</p><p>我来举例说明把在 Apple 生态里面。商店里面的程序都是沙盒的。相互之间都是独立的。不过有一个地方是可以看到沙盒内部，在开发文档里面也是同样描述那就是 Documents 的路径。举例一个 iOS App 如果你在Documents 下面有文件，那你在 iTunes App 的那页下面是可以看到这些文件。同样的概念延续到了 iCloud 上。当 App 的文件存于他自己 iCloud 路径下的 Documents 文件夹下面的时候。你就可以在 Finder 中 iCloud Drive看到。App iCloud 容器下另外的路径是不会显示到 Finder 下面的时候，所以并不是使用了 iCloud 的应用都在这里有文件夹。这些都取决于开发商对自己 App 的设计和实现。</p><h4 id="Library-Mobile-Documents"><a href="#Library-Mobile-Documents" class="headerlink" title="/Library/Mobile Documents"></a>/Library/Mobile Documents</h4><p>这个路径下就是 iCloud 数据在 OS X 的缓存路径。理论上来说，这个路径下是跟 iCloud Drive 服务器上的数据同步的。（没升级 iCloud Drive 就是跟 iCloud 服务器上的数据同步的）</p><h4 id="Library-Caches-CloudKit"><a href="#Library-Caches-CloudKit" class="headerlink" title="/Library/Caches/CloudKit"></a>/Library/Caches/CloudKit</h4><p>CloudKit 的缓存路径</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>毫不谦虚的说，本文虽然条例不是清晰。但是是目前中文说明里面对这次 iCloud 变更目前位置最详细的解释。（PS：看在写到凌晨n点的情况下。做自己吹一下）</p><ol><li>一定要升级 iCloud Drive，这样对大家都好。用户可以得到更好的体验。开发者可以使用新的技术做出更加好玩的东西出来。</li><li>能使用 iCloud 技术的厂家都不容易。请善待他们。</li><li>我是一个 iCloud 黑。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用,也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/3.0/deed.zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站,这样您将能在第一时间获取本站信息.&lt;/p&gt;
&lt;h2 id=&quot;开篇扯淡&quot;&gt;&lt;a href=&quot;#开篇扯淡&quot; class=&quot;headerlink&quot; title=&quot;开篇扯淡&quot;&gt;&lt;/a&gt;开篇扯淡&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;好久没有写 blog 了。 &lt;/li&gt;
&lt;li&gt;最近发现很多人对 iCloud 和 iCloud Drive 有些误解。而还没有看见中文里面有一个比较正确的说法。&lt;/li&gt;
&lt;li&gt;加上近两年来工作就是在学习 iCloud 如何使用。最近一个月做客服小弟回复了 N 个 iCloud 的问题。所以感觉还是有一些价值的。特意想记录一下。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;是否升级到-iCloud-Drive&quot;&gt;&lt;a href=&quot;#是否升级到-iCloud-Drive&quot; class=&quot;headerlink&quot; title=&quot;是否升级到 iCloud Drive&quot;&gt;&lt;/a&gt;是否升级到 iCloud Drive&lt;/h2&gt;&lt;p&gt;在 iOS 8 刚刚上线的时候，用户更新了以后。第一次会跳出来，说需要重新升级的 iCloud Drive。因为没有更多的信息和提示，我想一个正常的用户应该都会去点击升级。结果就是导致很多使用 iCloud 这个功能的 App 数据出现问题。或者导致了设备之间的不同步。那会有很多文章在建议不要升级 iCloud Drive。所以可能会给后来升级到 iOS 8 的用户造成一定的心里作用说升级 iCloud Drive 是不可靠的。&lt;/p&gt;
&lt;p&gt;其实根据我两年来 iCloud 的经验和测试结果。 iOS 8 的 iCloud Drive 是一个 Apple 云端的一次最重要的里程碑。 是 iCloud 这个技术在 Apple 产品系列上第一次做到了可用的状态。等了三年终于有个云的模样了。&lt;/p&gt;
&lt;p&gt;当时不建议升级 iCloud Drive 的理由其实就两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于开发者来说，由于 Apple 为了保密 iPhone 6 和 iPhone 6 Plus。 其实在9月发布会之前。 iOS 8 的 最后两个 Beta 版本是没有提供给开发者的。在能获得的最后的 Beta 版本上。 开发者使用 iCloud 依然各种莫名其妙的问题。一直到 GM 版本才变得正常。这样导致 GM 到发布正式的版本之间的时间。大部分开发者还无法把更新 iCloud 的技术及时的完善在自己的 App 里面。&lt;/li&gt;
&lt;li&gt;另外一个是在 iOS 8 已经放出来的时候，OS X 10.10 还没有放出来。这样如果你是一个 Apple 一套的普通用户。就会导致你一些全平台使用 iCloud 技术的 App无法相互同步。所以在当时确实这样情况的普通用户应该谨慎更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在11月了这两个问题随着开发者对 App 的完善和 OS X 10.10 释出。其实都不是问题了。大家可以放心大胆的升级了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="just-talk" scheme="http://iiiyu.com/tags/just-talk/"/>
    
  </entry>
  
  <entry>
    <title>怎样使用Sketch 3切图 —— 从想入设计大门的菜逼进化到切图仔（未完成）</title>
    <link href="http://iiiyu.com/2014/04/23/learn-ui-design-two/"/>
    <id>http://iiiyu.com/2014/04/23/learn-ui-design-two/</id>
    <published>2014-04-22T13:00:06.000Z</published>
    <updated>2014-10-19T16:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/3.0/deed.zh" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><p><strong>本文未完成懒得屏蔽了</strong></p><h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><p>Sketch 3发布了，而且在国内设计圈产生了一阵不小的影响。（好吧，我承认我混的不是这个圈子）作为一个拥有Sketch 2的老用户来说。这颗闪亮的钻石本来只我才知道他的好。就像小时候发现了一个出租激情小电影的小店铺，突然某一天冒出来一堆人也来租。那种小秘密被打破莫名的失落感。</p><p>好吧，其实这个是一个好事情。用的人多了，素材也会多。教程也会多。</p><p>顺便一提Sketch 3的发布之前MengTo大神的<a href="http://designcode.io" target="_blank" rel="noopener">Design Code</a>新书也在不断更新中。严重怀疑是商量好一起来坑钱包的。 配合的这么天衣无缝。在Sketch 3还没有正式发布的时候，MengTo大神更新的视频就是用的Sketch 3 beta版本。弄的我还以为我的Sketch 2是不是打开姿势不正确。</p><p>写这篇的原型是因为看到weibo上有小朋友，居然用我大切图神器Sketch的姿势不对。所以虽然不是什么高级的功能。但是鉴于跟我一样徘徊在设计大门的朋友还是很多，我就记录一下。</p><p>在没有Sketch之前，设计师给过来的素材都是psd的。作为一个有节操的少年，虽然我拥有CS4的教育版本，但是我还是会用Pixelmator去切图。（PS：主要是不会使用PS！）不过由于兼容性的问题Pixelmator切图会丢失psd的一些图层效果。所以后来一直是设计师把图给切好了在给过来。（明明是想办法偷懒！！）</p><p>不过后来，有了Sketch这货，我也就开始自己尝试切图。而且Sketch可以直接切出1x和2x。莫名的快感。（不要说PS有插件能做这个事情。我真不会和买不起PS）</p><a id="more"></a><h2 id="崭新的Sketch-3新切图功能"><a href="#崭新的Sketch-3新切图功能" class="headerlink" title="崭新的Sketch 3新切图功能"></a>崭新的Sketch 3新切图功能</h2><p>虽然Sketch 2中切图可以导出1x和2x。可是很多时候还是感觉切图不方便。主要是因为Slice在更加深的一层。如果画布上的图有更新和变动。Slice需要一起更新的话还要点过去。但是一般情况下，只有需要切图的时候才要点过去。导致每次需要调整Slice的位置和大小很不爽快。而且Slice的命名也需要多余的点击去修改。</p><p>这些问题在Sketch 3里面都得到了改进！</p><ol><li>把Slice提到最外面，做为设计的同一个层级。</li><li>Slice虽然现在是一等公民，可是有可以选择显示or不显示。相当方便。</li><li>更加智能的认出要切的部分。</li></ol><h2 id="切图技能进化"><a href="#切图技能进化" class="headerlink" title="切图技能进化"></a>切图技能进化</h2><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用,也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/3.0/deed.zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站,这样您将能在第一时间获取本站信息.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文未完成懒得屏蔽了&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;开篇扯淡&quot;&gt;&lt;a href=&quot;#开篇扯淡&quot; class=&quot;headerlink&quot; title=&quot;开篇扯淡&quot;&gt;&lt;/a&gt;开篇扯淡&lt;/h2&gt;&lt;p&gt;Sketch 3发布了，而且在国内设计圈产生了一阵不小的影响。（好吧，我承认我混的不是这个圈子）作为一个拥有Sketch 2的老用户来说。这颗闪亮的钻石本来只我才知道他的好。就像小时候发现了一个出租激情小电影的小店铺，突然某一天冒出来一堆人也来租。那种小秘密被打破莫名的失落感。&lt;/p&gt;
&lt;p&gt;好吧，其实这个是一个好事情。用的人多了，素材也会多。教程也会多。&lt;/p&gt;
&lt;p&gt;顺便一提Sketch 3的发布之前MengTo大神的&lt;a href=&quot;http://designcode.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Design Code&lt;/a&gt;新书也在不断更新中。严重怀疑是商量好一起来坑钱包的。 配合的这么天衣无缝。在Sketch 3还没有正式发布的时候，MengTo大神更新的视频就是用的Sketch 3 beta版本。弄的我还以为我的Sketch 2是不是打开姿势不正确。&lt;/p&gt;
&lt;p&gt;写这篇的原型是因为看到weibo上有小朋友，居然用我大切图神器Sketch的姿势不对。所以虽然不是什么高级的功能。但是鉴于跟我一样徘徊在设计大门的朋友还是很多，我就记录一下。&lt;/p&gt;
&lt;p&gt;在没有Sketch之前，设计师给过来的素材都是psd的。作为一个有节操的少年，虽然我拥有CS4的教育版本，但是我还是会用Pixelmator去切图。（PS：主要是不会使用PS！）不过由于兼容性的问题Pixelmator切图会丢失psd的一些图层效果。所以后来一直是设计师把图给切好了在给过来。（明明是想办法偷懒！！）&lt;/p&gt;
&lt;p&gt;不过后来，有了Sketch这货，我也就开始自己尝试切图。而且Sketch可以直接切出1x和2x。莫名的快感。（不要说PS有插件能做这个事情。我真不会和买不起PS）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design" scheme="http://iiiyu.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>iOS笔记(35) 格志周年系列之夏令时(三) 临时花絮</title>
    <link href="http://iiiyu.com/2014/04/08/learning-ios-notes-thirty-five/"/>
    <id>http://iiiyu.com/2014/04/08/learning-ios-notes-thirty-five/</id>
    <published>2014-04-08T10:49:48.000Z</published>
    <updated>2014-04-08T15:55:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/3.0/deed.zh" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><p>说曹操，曹操到。嘛当，还说总结一下时间的问题。这不blog这个系列没有写完。又爆了出一个时间相关的Bug。我只能说编程路茫茫，吾将上下求索。这次就着热乎着，来说是一个遇到了什么问题。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>有日本用户反馈，新版本更新以后，他日历上的时间全部乱了。而且无法写入日记。经过与用户沟通（感谢喵神onevcat的日文人肉翻译）分析得到用户使用和历（日本日历）。然后debug进去果然日期全部乱了。跟进去debug了一番，发现是之前解决夏令时的函数只考虑了公历！！！而iOS系统默认有三种日历。公历、和历、佛历。又一次无情的证明了我是一个天朝土包子。</p><a id="more"></a><h2 id="iOS-amp-amp-OS-X-支持的日历"><a href="#iOS-amp-amp-OS-X-支持的日历" class="headerlink" title="iOS &amp;&amp; OS X 支持的日历"></a>iOS &amp;&amp; OS X 支持的日历</h2><p>这个问题的出现提醒了我，地球上不同的人们其实是使用着不同的日历。（在这之前学习到的是地球上的人们过着不同的时区，有夏令时和没夏令时的时间）。</p><p>iOS从Settings-&gt;General-&gt;International-&gt;Calendar。</p><p><img src="http://ww4.sinaimg.cn/large/a6d3226bgw1ef8l1icf7pj20hs0vkdgp.jpg" alt=""></p><p>可以看到是默认只是支持公历、和历、佛历。</p><p><img src="http://ww4.sinaimg.cn/large/a6d3226bgw1ef8lfdww4aj20il0cewfz.jpg" alt=""></p><p>OS X 要多一些…（好吧，大部分我都不认识）</p><p>那到底iOS &amp;&amp; OS X支持哪些日历呢。</p><p>看这里内建的有这些<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSLocale_Class/Reference/Reference.html#jumpTo_50" target="_blank" rel="noopener">NSLocale Calendar Keys</a> (PS: 经过测试农历那个之前处于半残疾状态)</p><h2 id="用代码测试一下"><a href="#用代码测试一下" class="headerlink" title="用代码测试一下"></a>用代码测试一下</h2><p>我遇到的问题是我获得00:00:00的方法是直接用string然后反向设置小时、分钟、秒数得来的。所以，当日历不同的时候date-&gt;string就不一样了！！！这样我只判断了公历的时候，和历和佛历就错了。</p><p>详细代码可以查考这个<a href="https://github.com/iiiyu/TestNSDateFormatterOnMac" target="_blank" rel="noopener">TestNSDateFormatterOnMac</a></p><p>我fork了一个霓虹大神改动的。 添加了佛历的对比。</p><p><img src="http://ww1.sinaimg.cn/large/a6d3226bgw1ef8m65ylz2j20lq0gtgo8.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做好一个App其实挺难的，做好一款全球化的App更是难上加难。特别是我这种天朝土鳖，写程序的时候脑子里面就没全球化的意识。</p><p>附上一个今天在推上看到的心酸笑话：</p><p>编历法的玛雅码农想「我做个日历做上一千年应该就够用了吧」；编UNIX的码农想「我写个OS能用到2038年应该就够用了吧」；编RFC791的码农想「我整个IP能给42.9亿人用应该就够用了吧」——都给全世界添了乱子。我们做码农的一定要引以为戒 #读日语推有感#</p><h2 id="一些参考"><a href="#一些参考" class="headerlink" title="一些参考"></a>一些参考</h2><p><a href="http://zh.wikipedia.org/wiki/農曆" target="_blank" rel="noopener">农历 wiki</a></p><p><a href="http://zh.wikipedia.org/wiki/希伯來曆" target="_blank" rel="noopener">希伯來历 wiki</a></p><p><a href="http://zh.wikipedia.org/wiki/ISO_8601" target="_blank" rel="noopener">ISO 8601 wiki</a></p><p><a href="http://www.unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns" target="_blank" rel="noopener">UNICODE LOCALE DATA MARKUP LANGUAGE (LDML)</a></p><p><a href="http://balunsoftware.jp/info/2013/06/nsdateformatter-japanese/" target="_blank" rel="noopener">NSDateFormatter で、和暦の変換に固定する</a></p><p><a href="http://kevin-wu.net/ios-locale-and-calendar-tips/" target="_blank" rel="noopener">在开发iOS程序时对日期处理的总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用,也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/3.0/deed.zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站,这样您将能在第一时间获取本站信息.&lt;/p&gt;
&lt;h2 id=&quot;开篇扯淡&quot;&gt;&lt;a href=&quot;#开篇扯淡&quot; class=&quot;headerlink&quot; title=&quot;开篇扯淡&quot;&gt;&lt;/a&gt;开篇扯淡&lt;/h2&gt;&lt;p&gt;说曹操，曹操到。嘛当，还说总结一下时间的问题。这不blog这个系列没有写完。又爆了出一个时间相关的Bug。我只能说编程路茫茫，吾将上下求索。这次就着热乎着，来说是一个遇到了什么问题。&lt;/p&gt;
&lt;h2 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h2&gt;&lt;p&gt;有日本用户反馈，新版本更新以后，他日历上的时间全部乱了。而且无法写入日记。经过与用户沟通（感谢喵神onevcat的日文人肉翻译）分析得到用户使用和历（日本日历）。然后debug进去果然日期全部乱了。跟进去debug了一番，发现是之前解决夏令时的函数只考虑了公历！！！而iOS系统默认有三种日历。公历、和历、佛历。又一次无情的证明了我是一个天朝土包子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://iiiyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>学习UI设计笔记(一)</title>
    <link href="http://iiiyu.com/2014/03/25/learn-ui-design-one/"/>
    <id>http://iiiyu.com/2014/03/25/learn-ui-design-one/</id>
    <published>2014-03-25T10:12:21.000Z</published>
    <updated>2014-03-25T15:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/3.0/deed.zh" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><p>那啥， 我知道NSDate的坑没有搞定。缓缓，缓缓。我在开个新坑来着。恩恩这个坑就是记录一下怎么学习Sketch 这个软件的。</p><p>首先，我买了本<a href="http://www.amazon.cn/更优秀的APP-31个APP用户界面设计经典案例-白润华/dp/B00ELMXLOK/ref=sr_1_1?ie=UTF8&amp;qid=1395760594&amp;sr=8-1&amp;keywords=31app" target="_blank" rel="noopener">更优秀的APP-31个APP用户界面设计经典案例</a>。 高手勿喷，这种图文并茂，手把手的交比较适合我这种菜鸟。</p><p>这本书的唯一好处是他的例子是Ai的。而Sketch也是矢量图。所以我以为会有些类似的操作。（其实根本是两个软件啊！！！！）</p><p>然后我准备把他说的31个例子都用Sketch来模仿一边。恩，先把Sketch的大部分功能运用熟练再说（就是花了小几百不想让他吃灰而已）</p><a id="more"></a><h2 id="Sketch资料"><a href="#Sketch资料" class="headerlink" title="Sketch资料"></a>Sketch资料</h2><p><a href="http://www.bohemiancoding.com/sketch/" target="_blank" rel="noopener">官网</a></p><p>Sketch的资料其实并不是很多，原因之一是能熟练使用Adobe一套的大家（除了我）都能很快的入手。所以像我这样完全没有用过Photoshop的人在贵圈是一种奇葩。</p><p>所以中文资料就特别特别不多，不多的意思是图灵社区的某个大神把操作手册翻译了一下</p><p><a href="http://www.ituring.com.cn/book/1305?q=Sketch" target="_blank" rel="noopener">Sketch中文手册</a></p><p>在没有发布的时候我就知道了，我满怀憧憬的等待这本书的上线。结果，嗯嗯很不错的一本使用手册。</p><p>洋文资料最多的就是MengTo大神的</p><p><a href="http://blog.mengto.com" target="_blank" rel="noopener">大神blog</a></p><p>而且大神最近在预发售一本<a href="http://designcode.io" target="_blank" rel="noopener">design+code</a>。现在购买打5折哦。(免费为大神打个广告)</p><p>官方视频都在Vimeo上自带神器</p><p><a href="https://vimeo.com/57072774" target="_blank" rel="noopener">iOS Design using Sketch. Part one: iOS Navigation Bar</a></p><p><a href="https://vimeo.com/57590796" target="_blank" rel="noopener">iOS Design using Sketch. Part two: iOS Toolbar</a></p><p>对了，据可靠小道消息，这货的3.0要发布了。又是一次交钱的时刻。穷死了。</p><h2 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h2><p>咱程序员就要有程序员的范，每次的Sketch我都会丢到这个地址上，如果需要下源文件研究一下的同学知道去哪里找了把。</p><p><a href="https://github.com/iiiyu/learn-ui-design" target="_blank" rel="noopener">learn-ui-design</a></p><p>鉴于最近的网络情况，自带神器。</p><h2 id="大幅大幅的贴图"><a href="#大幅大幅的贴图" class="headerlink" title="大幅大幅的贴图"></a>大幅大幅的贴图</h2><h3 id="0"><a href="#0" class="headerlink" title="0"></a>0</h3><p><img src="http://ww2.sinaimg.cn/large/a6d3226bgw1eesf0yhz53j20zg0lmaew.jpg" alt="0"></p><p>恩，按照教程，我手绘了一张图片，然后用手机拍照了放到Sketch里面。</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="http://ww2.sinaimg.cn/large/a6d3226bgw1eesf3zl60jj20zg0lmn1i.jpg" alt="1"></p><p>拖了一个椭圆，然后选中铅笔工具，描绘了一下那个小尾巴。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><img src="http://ww4.sinaimg.cn/large/a6d3226bgw1eesf54xa8kj20zg0lmaf1.jpg" alt="2"></p><p>选中他们两个，进行Union操作。</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><img src="http://ww3.sinaimg.cn/large/a6d3226bgw1eesf5vjl8kj20zg0lmdkp.jpg" alt="3"></p><p>拖一个正方形出来</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><img src="http://ww2.sinaimg.cn/large/a6d3226bgw1eesf6sqy2sj20zg0lmwjs.jpg" alt="4"></p><p>正方形旋转45度</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><img src="http://ww2.sinaimg.cn/large/a6d3226bgw1eesf7fq37ij20zg0lm0xy.jpg" alt="5"></p><p>在正方形上双击会出现可以编辑的关键点</p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><img src="http://ww2.sinaimg.cn/large/a6d3226bgw1eesf7ukiefj20zg0lm0xz.jpg" alt="6"></p><p>删除掉最右边的关键点，变成一个三角形</p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p><img src="http://ww2.sinaimg.cn/large/a6d3226bgw1eesf979g3dj20zg0lmtd3.jpg" alt="7"></p><p>把气泡弄出来看一下整体效果</p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p><img src="http://ww3.sinaimg.cn/large/a6d3226bgw1eesf9x1vynj20zg0lmdkr.jpg" alt="8"></p><p>随便上个颜色试试</p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p><img src="http://ww1.sinaimg.cn/large/a6d3226bgw1eesfacyshyj20zg0lm0vn.jpg" alt="9"></p><p>最终版本，我尽力了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>恩，2014年的一个要努力的目标就是把自己的品味搞上去。恩呢，加油。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用,也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/3.0/deed.zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站,这样您将能在第一时间获取本站信息.&lt;/p&gt;
&lt;h2 id=&quot;开篇扯淡&quot;&gt;&lt;a href=&quot;#开篇扯淡&quot; class=&quot;headerlink&quot; title=&quot;开篇扯淡&quot;&gt;&lt;/a&gt;开篇扯淡&lt;/h2&gt;&lt;p&gt;那啥， 我知道NSDate的坑没有搞定。缓缓，缓缓。我在开个新坑来着。恩恩这个坑就是记录一下怎么学习Sketch 这个软件的。&lt;/p&gt;
&lt;p&gt;首先，我买了本&lt;a href=&quot;http://www.amazon.cn/更优秀的APP-31个APP用户界面设计经典案例-白润华/dp/B00ELMXLOK/ref=sr_1_1?ie=UTF8&amp;amp;qid=1395760594&amp;amp;sr=8-1&amp;amp;keywords=31app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;更优秀的APP-31个APP用户界面设计经典案例&lt;/a&gt;。 高手勿喷，这种图文并茂，手把手的交比较适合我这种菜鸟。&lt;/p&gt;
&lt;p&gt;这本书的唯一好处是他的例子是Ai的。而Sketch也是矢量图。所以我以为会有些类似的操作。（其实根本是两个软件啊！！！！）&lt;/p&gt;
&lt;p&gt;然后我准备把他说的31个例子都用Sketch来模仿一边。恩，先把Sketch的大部分功能运用熟练再说（就是花了小几百不想让他吃灰而已）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Design" scheme="http://iiiyu.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>iOS笔记(34) 格志周年系列之夏令时(二)</title>
    <link href="http://iiiyu.com/2014/03/19/learning-ios-notes-thirty-four/"/>
    <id>http://iiiyu.com/2014/03/19/learning-ios-notes-thirty-four/</id>
    <published>2014-03-19T07:37:48.000Z</published>
    <updated>2014-03-20T15:28:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅作为个人学习记录使用,也欢迎在<a href="http://creativecommons.org/licenses/by-nc/3.0/deed.zh" target="_blank" rel="noopener">许可协议</a>范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用<a href="http://iiiyu.com/atom.xml">RSS</a>方式订阅本站,这样您将能在第一时间获取本站信息.</p><h2 id="开篇扯淡"><a href="#开篇扯淡" class="headerlink" title="开篇扯淡"></a>开篇扯淡</h2><p>恩，两月没更新blog，hexo都出来新主题来着。其实昨天为了找个背景图找了一小时我会随便乱说。就是为了找一个配合网站标题的背景图。其实hexo默认的就蛮好了，但是为了显示那么一点点与众不同还是替换了一下。</p><p>扯淡结束，接上一篇<a href="http://iiiyu.com/2014/03/18/learning-ios-notes-thirty-three/">格志周年系列之夏令时(一)</a></p><h2 id="第一阶段Bug"><a href="#第一阶段Bug" class="headerlink" title="第一阶段Bug"></a>第一阶段Bug</h2><p>上次说过一个中国高富帅用户发Email来说，他去泰国旅游的时候，日记都不见了。</p><p>其实不是日记不见了，日记都好好的躺在sqlite文件里面。而是查询不出来了。日记的保存是用了一个函数去获得了每天的00:00:00. 然后作为唯一标识来区别和查询。  </p><p>那日期出了啥问题？</p><p>我们来快速的分析一下</p><p>调用的是</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (NSDate *) dateAtStartOfDay</span><br><span class="line">&#123;</span><br><span class="line">NSDateComponents *<span class="built_in">components</span> = [CURRENT_CALENDAR <span class="built_in">components</span>:DATE_COMPONENTS fromDate:self];</span><br><span class="line"><span class="built_in">components</span>.hour = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">components</span>.minute = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">components</span>.<span class="built_in">second</span> = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">return</span> [CURRENT_CALENDAR dateFromComponents:<span class="built_in">components</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面有两个宏</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define DATE_COMPONENTS (NSYearCalendarUnit| <span class="type">NSMonthCalendarUnit</span> | <span class="type">NSDayCalendarUnit</span> | <span class="type">NSWeekCalendarUnit</span> |  <span class="type">NSHourCalendarUnit</span> | <span class="type">NSMinuteCalendarUnit</span> | <span class="type">NSSecondCalendarUnit</span> | <span class="type">NSWeekdayCalendarUnit</span> | <span class="type">NSWeekdayOrdinalCalendarUnit</span>)</span><br><span class="line">#define CURRENT_CALENDAR [NSCalendar currentCalendar]</span><br></pre></td></tr></table></figure><p>假设你使用过Cocoa时间这些类的话能很容易的看出。dateAtStartOfDay函数就是把你持有的date以当前日历为基础，其他不改，小时，分钟，秒钟设置都为0。这样就能得到一个基于当前日历下的date这一天的00:00:00。</p><p>简单看上去没有什么问题，回到高富帅的问题。他出国玩一圈咋时间就变了呢？答案是[NSCalendar currentCalendar]改变了。NSCalendar的改变使得dateAtStartOfDay返回的时间也变了。debug到这一步才发觉靠当初为什么没有想到有时区的这个问题。</p><p>自己给自己找一个理由就是到目前为止，我只用过大天朝的+8时间。潜意识里面根本没有说换一个时区这样的概念。(后来某一天我翻了本C语言的书第一章就说了国际化时间的问题，再后来weibo上大家都纷纷表示时间是编程里面一个基础点而且做好不容易，只能说我还是太菜太年轻了。这些是后话了)</p><p>说道这里那就开始科普一下地球上时间的问题</p><a id="more"></a><h2 id="世界时间"><a href="#世界时间" class="headerlink" title="世界时间"></a>世界时间</h2><p>由于人类历史的缘由，地球上以大概的地理位置画分时区。<a href="http://en.wikipedia.org/wiki/Time_zone" target="_blank" rel="noopener">Time Zone Wiki</a></p><p>我认为时间是大爆炸以后产生的扩张现象，在可预见的人类的历史上肯定是不可逆转的。所以每一个时刻对于人类来说应该是唯一的。但是，在这同一个时刻里面，在地球的不同地方使用着不同的时间格式来表现着。我认为这是相当不科学的一个事情。随着人类文明的进步，我觉得最后应该会全世界时间大统一的。</p><p>回到现实中还是要解决现在因为时区而产生的问题。</p><h2 id="iOS中的时间"><a href="#iOS中的时间" class="headerlink" title="iOS中的时间"></a>iOS中的时间</h2><p>在Cocoa里面，获取一个当前时间是</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"Now:%@"</span>, [<span class="built_in">NSDate</span> date]);</span><br></pre></td></tr></table></figure><p>Log出来应该是一个 xxxx-xx-xx xx:xx:xx +0000。但是聪明的你，人如果处在大天朝内马上发现这个时间比你电脑上的时间少了8小时。</p><p>恩,因为NSDate记录的是一个绝对的值。这个值代表的意思是UTC时区的绝对时间。我们就把它看作为我们写Cocoa程序的一个绝对时间，千万要记住这一点。因为接下来的一堆概念会把人弄晕的。（我就晕了好久#_#）</p><p><a href="http://zh.wikipedia.org/wiki/協調世界時" target="_blank" rel="noopener">UTC Wiki</a></p><p>与UTC有点关系的GMT时间，稍作了解避免搞混了。（实在分不清，你就记住UTC是一个更加精准的标准时间）</p><p><a href="http://zh.wikipedia.org/zh-cn/格林尼治平时" target="_blank" rel="noopener">GMT Wiki</a></p><p>那NSDate存储了一个什么值来代表时间呢？可以简单的认为他是记录了一个浮点数。这个浮点数代表什么呢？我们注意到头文件里面有个这样的方法timeIntervalSince1970。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// seconds</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"seconds %lf"</span>, [[<span class="built_in">NSDate</span> date] timeIntervalSince1970]);</span><br></pre></td></tr></table></figure><p>在写文章的此时此刻打印出来是“1395324408.535384”。简单运算一下</p><pre><code>1395324408.535384 / 60 / 60 / 24 / 365 ≈ 44.2454467452014.x - 44.x ≈ 1970</code></pre><p>看到这里，就可以很明确的认为用NSDate来存储的时间是从1970-01-01 00:00:00 到那个时刻所经历的秒数。</p><p>为什么是1970？如果你接触过一些计算机的知识或者其他编程语言或者数据库等。你都可能在时间相关的地方会发现1970很眼熟的样子。<a href="https://duckduckgo.com" target="_blank" rel="noopener">放鸭</a>搜索了一下。找到一些比较权威的说法。</p><p>首先能找到权威解释是<a href="http://en.wikipedia.org/wiki/Unix_time" target="_blank" rel="noopener">Unix time</a>。简单粗暴的来说就是我们现在用的 <em>nix 以及基于 </em>nix的一堆东西（包括了现在使用的绝大部分东西）都是1970年极其以后出现的。那时候大家觉得就从1970-01-01 00:00:00开始算时间是个不错的主意。就这么一直延续下来了。（PS：忽略了一堆32bit or 64bit的点。需要详细解释的看url）</p><p>看NSDate头文件还</p><p>发现一个有意思的宏</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSTimeIntervalSince1970  978307200.0</span></span><br></pre></td></tr></table></figure><p>稍微做了一下运算。可以知道这是从1970-01-01 00:00:00 到2001-01-01 00:00:00经过的秒数。稍微思考一下应该是用来进行了优化运算的。</p><p>待续。。。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这么一点字又写了两天，还是要每天坚持啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅作为个人学习记录使用,也欢迎在&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/3.0/deed.zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;许可协议&lt;/a&gt;范围内转载或使用，请尊重版权并且保留原文链接，谢谢您的理解合作。如果您觉得本站对您能有帮助,您可以使用&lt;a href=&quot;http://iiiyu.com/atom.xml&quot;&gt;RSS&lt;/a&gt;方式订阅本站,这样您将能在第一时间获取本站信息.&lt;/p&gt;
&lt;h2 id=&quot;开篇扯淡&quot;&gt;&lt;a href=&quot;#开篇扯淡&quot; class=&quot;headerlink&quot; title=&quot;开篇扯淡&quot;&gt;&lt;/a&gt;开篇扯淡&lt;/h2&gt;&lt;p&gt;恩，两月没更新blog，hexo都出来新主题来着。其实昨天为了找个背景图找了一小时我会随便乱说。就是为了找一个配合网站标题的背景图。其实hexo默认的就蛮好了，但是为了显示那么一点点与众不同还是替换了一下。&lt;/p&gt;
&lt;p&gt;扯淡结束，接上一篇&lt;a href=&quot;http://iiiyu.com/2014/03/18/learning-ios-notes-thirty-three/&quot;&gt;格志周年系列之夏令时(一)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一阶段Bug&quot;&gt;&lt;a href=&quot;#第一阶段Bug&quot; class=&quot;headerlink&quot; title=&quot;第一阶段Bug&quot;&gt;&lt;/a&gt;第一阶段Bug&lt;/h2&gt;&lt;p&gt;上次说过一个中国高富帅用户发Email来说，他去泰国旅游的时候，日记都不见了。&lt;/p&gt;
&lt;p&gt;其实不是日记不见了，日记都好好的躺在sqlite文件里面。而是查询不出来了。日记的保存是用了一个函数去获得了每天的00:00:00. 然后作为唯一标识来区别和查询。  &lt;/p&gt;
&lt;p&gt;那日期出了啥问题？&lt;/p&gt;
&lt;p&gt;我们来快速的分析一下&lt;/p&gt;
&lt;p&gt;调用的是&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (NSDate *) dateAtStartOfDay&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NSDateComponents *&lt;span class=&quot;built_in&quot;&gt;components&lt;/span&gt; = [CURRENT_CALENDAR &lt;span class=&quot;built_in&quot;&gt;components&lt;/span&gt;:DATE_COMPONENTS fromDate:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;components&lt;/span&gt;.hour = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;components&lt;/span&gt;.minute = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;components&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;second&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; [CURRENT_CALENDAR dateFromComponents:&lt;span class=&quot;built_in&quot;&gt;components&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;里面有两个宏&lt;/p&gt;
&lt;figure class=&quot;highlight coq&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define DATE_COMPONENTS (NSYearCalendarUnit| &lt;span class=&quot;type&quot;&gt;NSMonthCalendarUnit&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;NSDayCalendarUnit&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;NSWeekCalendarUnit&lt;/span&gt; |  &lt;span class=&quot;type&quot;&gt;NSHourCalendarUnit&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;NSMinuteCalendarUnit&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;NSSecondCalendarUnit&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;NSWeekdayCalendarUnit&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;NSWeekdayOrdinalCalendarUnit&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define CURRENT_CALENDAR [NSCalendar currentCalendar]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设你使用过Cocoa时间这些类的话能很容易的看出。dateAtStartOfDay函数就是把你持有的date以当前日历为基础，其他不改，小时，分钟，秒钟设置都为0。这样就能得到一个基于当前日历下的date这一天的00:00:00。&lt;/p&gt;
&lt;p&gt;简单看上去没有什么问题，回到高富帅的问题。他出国玩一圈咋时间就变了呢？答案是[NSCalendar currentCalendar]改变了。NSCalendar的改变使得dateAtStartOfDay返回的时间也变了。debug到这一步才发觉靠当初为什么没有想到有时区的这个问题。&lt;/p&gt;
&lt;p&gt;自己给自己找一个理由就是到目前为止，我只用过大天朝的+8时间。潜意识里面根本没有说换一个时区这样的概念。(后来某一天我翻了本C语言的书第一章就说了国际化时间的问题，再后来weibo上大家都纷纷表示时间是编程里面一个基础点而且做好不容易，只能说我还是太菜太年轻了。这些是后话了)&lt;/p&gt;
&lt;p&gt;说道这里那就开始科普一下地球上时间的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://iiiyu.com/tags/iOS/"/>
    
  </entry>
  
</feed>
